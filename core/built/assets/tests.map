{"version":3,"sources":["ghost/tests/acceptance/authentication-test.js","ghost/tests/acceptance/settings/navigation-test.js","ghost/tests/acceptance/settings/tags-test.js","ghost/tests/acceptance/setup-test.js","ghost/tests/helpers/adapter-error.js","ghost/tests/helpers/destroy-app.js","ghost/tests/helpers/ember-simple-auth.js","ghost/tests/helpers/module-for-acceptance.js","ghost/tests/helpers/resolver.js","ghost/tests/helpers/start-app.js","ghost/tests/integration/adapters/tag-test.js","ghost/tests/integration/adapters/user-test.js","ghost/tests/integration/components/gh-alert-test.js","ghost/tests/integration/components/gh-alerts-test.js","ghost/tests/integration/components/gh-cm-editor-test.js","ghost/tests/integration/components/gh-navigation-test.js","ghost/tests/integration/components/gh-navitem-test.js","ghost/tests/integration/components/gh-navitem-url-input-test.js","ghost/tests/integration/components/gh-notification-test.js","ghost/tests/integration/components/gh-notifications-test.js","ghost/tests/integration/components/gh-profile-image-test.js","ghost/tests/integration/components/gh-tag-settings-form-test.js","ghost/tests/integration/components/gh-tags-management-container-test.js","ghost/tests/integration/components/gh-validation-status-container-test.js","ghost/tests/test-helper.js","ghost/tests/unit/components/gh-alert-test.js","ghost/tests/unit/components/gh-app-test.js","ghost/tests/unit/components/gh-content-preview-content-test.js","ghost/tests/unit/components/gh-editor-save-button-test.js","ghost/tests/unit/components/gh-editor-test.js","ghost/tests/unit/components/gh-infinite-scroll-box-test.js","ghost/tests/unit/components/gh-infinite-scroll-test.js","ghost/tests/unit/components/gh-navitem-url-input-test.js","ghost/tests/unit/components/gh-notification-test.js","ghost/tests/unit/components/gh-posts-list-item-test.js","ghost/tests/unit/components/gh-search-input-test.js","ghost/tests/unit/components/gh-select-native-test.js","ghost/tests/unit/components/gh-selectize-test.js","ghost/tests/unit/components/gh-spin-button-test.js","ghost/tests/unit/components/gh-trim-focus-input_test.js","ghost/tests/unit/components/gh-url-preview_test.js","ghost/tests/unit/components/gh-user-active-test.js","ghost/tests/unit/components/gh-user-invited-test.js","ghost/tests/unit/controllers/post-settings-menu-test.js","ghost/tests/unit/controllers/settings/general-test.js","ghost/tests/unit/controllers/settings/navigation-test.js","ghost/tests/unit/helpers/gh-user-can-admin-test.js","ghost/tests/unit/helpers/is-equal-test.js","ghost/tests/unit/helpers/is-not-test.js","ghost/tests/unit/mixins/infinite-scroll-test.js","ghost/tests/unit/mixins/validation-engine-test.js","ghost/tests/unit/models/post-test.js","ghost/tests/unit/models/role-test.js","ghost/tests/unit/models/setting-test.js","ghost/tests/unit/models/tag-test.js","ghost/tests/unit/models/user-test.js","ghost/tests/unit/services/config-test.js","ghost/tests/unit/services/notifications-test.js","ghost/tests/unit/utils/ghost-paths-test.js","ghost/tests/unit/validators/nav-item-test.js","ghost/tests/unit/validators/tag-settings-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ghost/tests/acceptance/authentication-test', ['exports', 'mocha', 'chai', 'ember', 'ghost/tests/helpers/start-app', 'ghost/tests/helpers/destroy-app', 'ghost/tests/helpers/ember-simple-auth', 'ember-cli-mirage', 'ghost/utils/window-proxy'], function (exports, _mocha, _chai, _ember, _ghostTestsHelpersStartApp, _ghostTestsHelpersDestroyApp, _ghostTestsHelpersEmberSimpleAuth, _emberCliMirage, _ghostUtilsWindowProxy) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Authentication', function () {\n        var application = undefined,\n            originalReplaceLocation = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('general page', function () {\n            (0, _mocha.beforeEach)(function () {\n                originalReplaceLocation = _ghostUtilsWindowProxy['default'].replaceLocation;\n                _ghostUtilsWindowProxy['default'].replaceLocation = function (url) {\n                    visit(url);\n                };\n\n                server.loadFixtures();\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role], slug: 'test-user' });\n            });\n\n            (0, _mocha.afterEach)(function () {\n                _ghostUtilsWindowProxy['default'].replaceLocation = originalReplaceLocation;\n            });\n\n            (0, _mocha.it)('invalidates session on 401 API response', function () {\n                // return a 401 when attempting to retrieve tags\n                server.get('/users/', function (db, request) {\n                    return new _emberCliMirage['default'].Response(401, {}, {\n                        errors: [{ message: 'Access denied.', errorType: 'UnauthorizedError' }]\n                    });\n                });\n\n                (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n                visit('/team');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'url after 401').to.equal('/signin');\n                });\n            });\n        });\n\n        (0, _mocha.describe)('editor', function () {\n            var origDebounce = _ember['default'].run.debounce;\n            var origThrottle = _ember['default'].run.throttle;\n\n            // we don't want the autosave interfering in this test\n            (0, _mocha.beforeEach)(function () {\n                _ember['default'].run.debounce = function () {};\n                _ember['default'].run.throttle = function () {};\n            });\n\n            (0, _mocha.it)('displays re-auth modal attempting to save with invalid session', function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // simulate an invalid session when saving the edited post\n                server.put('/posts/:id/', function (db, request) {\n                    var post = db.posts.find(request.params.id);\n\n                    var _JSON$parse$posts = _slicedToArray(JSON.parse(request.requestBody).posts, 1);\n\n                    var attrs = _JSON$parse$posts[0];\n\n                    if (attrs.markdown === 'Edited post body') {\n                        return new _emberCliMirage['default'].Response(401, {}, {\n                            errors: [{ message: 'Access denied.', errorType: 'UnauthorizedError' }]\n                        });\n                    } else {\n                        return {\n                            posts: [post]\n                        };\n                    }\n                });\n\n                server.loadFixtures();\n                (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n\n                visit('/editor');\n\n                // create the post\n                fillIn('#entry-title', 'Test Post');\n                fillIn('textarea.markdown-editor', 'Test post body');\n                click('.js-publish-button');\n\n                andThen(function () {\n                    // we shouldn't have a modal at this point\n                    (0, _chai.expect)(find('.modal-container #login').length, 'modal exists').to.equal(0);\n                    // we also shouldn't have any alerts\n                    (0, _chai.expect)(find('.gh-alert').length, 'no of alerts').to.equal(0);\n                });\n\n                // update the post\n                fillIn('textarea.markdown-editor', 'Edited post body');\n                click('.js-publish-button');\n\n                andThen(function () {\n                    // we should see a re-auth modal\n                    (0, _chai.expect)(find('.modal-container #login').length, 'modal exists').to.equal(1);\n                });\n            });\n\n            // don't clobber debounce/throttle for future tests\n            (0, _mocha.afterEach)(function () {\n                _ember['default'].run.debounce = origDebounce;\n                _ember['default'].run.throttle = origThrottle;\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/acceptance/settings/navigation-test', ['exports', 'mocha', 'chai', 'ghost/tests/helpers/start-app', 'ghost/tests/helpers/destroy-app', 'ghost/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _ghostTestsHelpersStartApp, _ghostTestsHelpersDestroyApp, _ghostTestsHelpersEmberSimpleAuth) {\n\n    (0, _mocha.describe)('Acceptance: Settings - Navigation', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // load the settings fixtures\n                // TODO: this should always be run for acceptance tests\n                server.loadFixtures();\n\n                (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('can visit /settings/navigation', function () {\n                visit('/settings/navigation');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentPath()).to.equal('settings.navigation');\n                    // test has expected number of rows\n                    (0, _chai.expect)($('.gh-blognav-item').length, 'navigation items count').to.equal(3);\n                });\n            });\n\n            (0, _mocha.it)('saves settings', function () {\n                visit('/settings/navigation');\n                fillIn('.gh-blognav-label:first input', 'Test');\n                fillIn('.gh-blognav-url:first input', '/test');\n                triggerEvent('.gh-blognav-url:first input', 'blur');\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    // TODO: Test for successful save here once we have a visual\n                    // indication. For now we know the save happened because\n                    // Pretender doesn't complain about an unknown URL\n\n                    // don't test against .error directly as it will pick up failed\n                    // tests \"pre.error\" elements\n                    (0, _chai.expect)($('span.error').length, 'error fields count').to.equal(0);\n                    (0, _chai.expect)($('.gh-alert').length, 'alerts count').to.equal(0);\n                });\n            });\n\n            (0, _mocha.it)('clears unsaved settings when navigating away', function () {\n                visit('/settings/navigation');\n                fillIn('.gh-blognav-label:first input', 'Test');\n                triggerEvent('.gh-blognav-label:first input', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)($('.gh-blognav-label:first input').val()).to.equal('Test');\n                });\n\n                visit('/settings/code-injection');\n                visit('/settings/navigation');\n\n                andThen(function () {\n                    (0, _chai.expect)($('.gh-blognav-label:first input').val()).to.equal('Home');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost/tests/acceptance/settings/tags-test', ['exports', 'mocha', 'chai', 'ember', 'ghost/tests/helpers/start-app', 'ghost/tests/helpers/destroy-app', 'ghost/tests/helpers/ember-simple-auth', 'ghost/tests/helpers/adapter-error', 'ember-cli-mirage'], function (exports, _mocha, _chai, _ember, _ghostTestsHelpersStartApp, _ghostTestsHelpersDestroyApp, _ghostTestsHelpersEmberSimpleAuth, _ghostTestsHelpersAdapterError, _emberCliMirage) {\n    var run = _ember['default'].run;\n\n    // Grabbed from keymaster's testing code because Ember's `keyEvent` helper\n    // is for some reason not triggering the events in a way that keymaster detects:\n    // https://github.com/madrobby/keymaster/blob/master/test/keymaster.html#L31\n    var modifierMap = {\n        16: 'shiftKey',\n        18: 'altKey',\n        17: 'ctrlKey',\n        91: 'metaKey'\n    };\n    var keydown = function keydown(code, modifiers, el) {\n        var event = document.createEvent('Event');\n        event.initEvent('keydown', true, true);\n        event.keyCode = code;\n        if (modifiers && modifiers.length > 0) {\n            for (var i in modifiers) {\n                event[modifierMap[modifiers[i]]] = true;\n            }\n        }\n        (el || document).dispatchEvent(event);\n    };\n    var keyup = function keyup(code, el) {\n        var event = document.createEvent('Event');\n        event.initEvent('keyup', true, true);\n        event.keyCode = code;\n        (el || document).dispatchEvent(event);\n    };\n\n    (0, _mocha.describe)('Acceptance: Settings - Tags', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/tags');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // load the settings fixtures\n                // TODO: this should always be run for acceptance tests\n                server.loadFixtures();\n\n                return (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders, can be navigated, can edit, create & delete tags', function () {\n                var tag1 = server.create('tag');\n                var tag2 = server.create('tag');\n\n                visit('/settings/tags');\n\n                andThen(function () {\n                    // it redirects to first tag\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Tags - Test Blog');\n\n                    // it highlights nav menu\n                    (0, _chai.expect)($('.gh-nav-settings-tags').hasClass('active'), 'highlights nav menu item').to.be['true'];\n\n                    // it lists all tags\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count').to.equal(2);\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:first .tag-title').text(), 'tag list item title').to.equal(tag1.name);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/' + tag1.slug + '\"]').hasClass('active'), 'highlights selected tag').to.be['true'];\n\n                    // it shows selected tag form\n                    (0, _chai.expect)(find('.tag-settings-pane h4').text(), 'settings pane title').to.equal('Tag Settings');\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal(tag1.name);\n                });\n\n                // click the second tag in the list\n                click('.tag-edit-button:last');\n\n                andThen(function () {\n                    // it navigates to selected tag\n                    (0, _chai.expect)(currentURL(), 'url after clicking tag').to.equal('/settings/tags/' + tag2.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/' + tag2.slug + '\"]').hasClass('active'), 'highlights selected tag').to.be['true'];\n\n                    // it shows selected tag form\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal(tag2.name);\n                });\n\n                andThen(function () {\n                    // simulate up arrow press\n                    run(function () {\n                        keydown(38);\n                        keyup(38);\n                    });\n                });\n\n                andThen(function () {\n                    // it navigates to previous tag\n                    (0, _chai.expect)(currentURL(), 'url after keyboard up arrow').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/' + tag1.slug + '\"]').hasClass('active'), 'selects previous tag').to.be['true'];\n                });\n\n                andThen(function () {\n                    // simulate down arrow press\n                    run(function () {\n                        keydown(40);\n                        keyup(40);\n                    });\n                });\n\n                andThen(function () {\n                    // it navigates to previous tag\n                    (0, _chai.expect)(currentURL(), 'url after keyboard down arrow').to.equal('/settings/tags/' + tag2.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/' + tag2.slug + '\"]').hasClass('active'), 'selects next tag').to.be['true'];\n                });\n\n                // trigger save\n                fillIn('.tag-settings-pane input[name=\"name\"]', 'New Name');\n                triggerEvent('.tag-settings-pane input[name=\"name\"]', 'blur');\n\n                andThen(function () {\n                    // check we update with the data returned from the server\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:last .tag-title').text(), 'tag list updates on save').to.equal('New Name');\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'settings form updates on save').to.equal('New Name');\n                });\n\n                // start new tag\n                click('.view-actions .btn-green');\n\n                andThen(function () {\n                    // it navigates to the new tag route\n                    (0, _chai.expect)(currentURL(), 'new tag URL').to.equal('/settings/tags/new');\n\n                    // it displays the new tag form\n                    (0, _chai.expect)(find('.tag-settings-pane h4').text(), 'settings pane title').to.equal('New Tag');\n\n                    // all fields start blank\n                    find('.tag-settings-pane input, .tag-settings-pane textarea').each(function () {\n                        (0, _chai.expect)($(this).val(), 'input field for ' + $(this).attr('name')).to.be.blank;\n                    });\n                });\n\n                // save new tag\n                fillIn('.tag-settings-pane input[name=\"name\"]', 'New Tag');\n                triggerEvent('.tag-settings-pane input[name=\"name\"]', 'blur');\n\n                andThen(function () {\n                    // it redirects to the new tag's URL\n                    (0, _chai.expect)(currentURL(), 'URL after tag creation').to.equal('/settings/tags/new-tag');\n\n                    // it adds the tag to the list and selects\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after creation').to.equal(3);\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:last .tag-title').text(), 'new tag list item title').to.equal('New Tag');\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/new-tag\"]').hasClass('active'), 'highlights new tag').to.be['true'];\n                });\n\n                // delete tag\n                click('.tag-delete-button');\n                click('.modal-container .btn-red');\n\n                andThen(function () {\n                    // it redirects to the first tag\n                    (0, _chai.expect)(currentURL(), 'URL after tag deletion').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it removes the tag from the list\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after deletion').to.equal(2);\n                });\n            });\n\n            (0, _mocha.it)('loads tag via slug when accessed directly', function () {\n                server.createList('tag', 2);\n\n                visit('/settings/tags/tag-1');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'URL after direct load').to.equal('/settings/tags/tag-1');\n\n                    // it loads all other tags\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after direct load').to.equal(2);\n\n                    // selects tag in list\n                    (0, _chai.expect)(find('a[href=\"/settings/tags/tag-1\"]').hasClass('active'), 'highlights requested tag').to.be['true'];\n\n                    // shows requested tag in settings pane\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal('Tag 1');\n                });\n            });\n\n            (0, _mocha.it)('has infinite scroll pagination of tags list', function () {\n                server.createList('tag', 32);\n\n                visit('settings/tags/tag-0');\n\n                andThen(function () {\n                    // it loads first page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on first load').to.equal(15);\n\n                    find('.tag-list').scrollTop(find('.tag-list-content').height());\n                });\n\n                wait().then(function () {\n                    // it loads the second page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on second load').to.equal(30);\n\n                    find('.tag-list').scrollTop(find('.tag-list-content').height());\n                });\n\n                wait().then(function () {\n                    // it loads the final page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on third load').to.equal(32);\n                });\n            });\n\n            (0, _mocha.describe)('with 404', function () {\n                (0, _mocha.beforeEach)(function () {\n                    (0, _ghostTestsHelpersAdapterError.errorOverride)();\n                });\n\n                (0, _mocha.afterEach)(function () {\n                    (0, _ghostTestsHelpersAdapterError.errorReset)();\n                });\n\n                (0, _mocha.it)('redirects to 404 when tag does not exist', function () {\n                    server.get('/tags/slug/unknown/', function () {\n                        return new _emberCliMirage['default'].Response(404, { 'Content-Type': 'application/json' }, { errors: [{ message: 'Tag not found.', errorType: 'NotFoundError' }] });\n                    });\n\n                    visit('settings/tags/unknown');\n\n                    andThen(function () {\n                        (0, _chai.expect)(currentPath()).to.equal('error404');\n                        (0, _chai.expect)(currentURL()).to.equal('/settings/tags/unknown');\n                    });\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost/tests/acceptance/setup-test', ['exports', 'mocha', 'chai', 'ember', 'ghost/tests/helpers/start-app', 'ghost/tests/helpers/destroy-app', 'ghost/tests/helpers/ember-simple-auth', 'ember-cli-mirage'], function (exports, _mocha, _chai, _ember, _ghostTestsHelpersStartApp, _ghostTestsHelpersDestroyApp, _ghostTestsHelpersEmberSimpleAuth, _emberCliMirage) {\n\n    (0, _mocha.describe)('Acceptance: Setup', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects if already authenticated', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n\n            visit('/setup/one');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n\n            visit('/setup/two');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n\n            visit('/setup/three');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n        });\n\n        (0, _mocha.it)('redirects to signin if already set up', function () {\n            // mimick an already setup blog\n            server.get('/authentication/setup/', function () {\n                return {\n                    setup: [{ status: true }]\n                };\n            });\n\n            (0, _ghostTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n\n            visit('/setup');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.describe)('with a new blog', function () {\n            (0, _mocha.beforeEach)(function () {\n                // mimick a new blog\n                server.get('/authentication/setup/', function () {\n                    return {\n                        setup: [{ status: false }]\n                    };\n                });\n            });\n\n            (0, _mocha.it)('has a successful happy path', function () {\n                (0, _ghostTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                visit('/setup');\n\n                andThen(function () {\n                    // it redirects to step one\n                    (0, _chai.expect)(currentURL(), 'url after accessing /setup').to.equal('/setup/one');\n\n                    // it highlights first step\n                    (0, _chai.expect)(find('.gh-flow-nav .step:first-of-type').hasClass('active')).to.be['true'];\n                    (0, _chai.expect)(find('.gh-flow-nav .step:nth-of-type(2)').hasClass('active')).to.be['false'];\n                    (0, _chai.expect)(find('.gh-flow-nav .step:nth-of-type(3)').hasClass('active')).to.be['false'];\n\n                    // it displays download count (count increments for each ajax call\n                    // and polling is disabled in testing so our count should be \"2\" -\n                    // 1 for first load and 1 for first poll)\n                    (0, _chai.expect)(find('.gh-flow-content em').text()).to.equal('2');\n                });\n\n                click('.btn-green');\n\n                andThen(function () {\n                    // it transitions to step two\n                    (0, _chai.expect)(currentURL(), 'url after clicking \"Create your account\"').to.equal('/setup/two');\n\n                    // email field is focused by default\n                    // NOTE: $('x').is(':focus') doesn't work in phantomjs CLI runner\n                    // https://github.com/ariya/phantomjs/issues/10427\n                    (0, _chai.expect)(find('[name=\"email\"]').get(0) === document.activeElement, 'email field has focus').to.be['true'];\n                });\n\n                click('.btn-green');\n\n                andThen(function () {\n                    // it marks fields as invalid\n                    (0, _chai.expect)(find('.form-group.error').length, 'number of invalid fields').to.equal(4);\n\n                    // it displays error messages\n                    (0, _chai.expect)(find('.error .response').length, 'number of in-line validation messages').to.equal(4);\n\n                    // it displays main error\n                    (0, _chai.expect)(find('.main-error').length, 'main error is displayed').to.equal(1);\n                });\n\n                // enter valid details and submit\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n                click('.btn-green');\n\n                andThen(function () {\n                    // it transitions to step 3\n                    (0, _chai.expect)(currentURL(), 'url after submitting step two').to.equal('/setup/three');\n\n                    // submit button is \"disabled\"\n                    (0, _chai.expect)(find('button[type=\"submit\"]').hasClass('btn-green'), 'invite button with no emails is white').to.be['false'];\n                });\n\n                // fill in a valid email\n                fillIn('[name=\"users\"]', 'new-user@example.com');\n\n                andThen(function () {\n                    // submit button is \"enabled\"\n                    (0, _chai.expect)(find('button[type=\"submit\"]').hasClass('btn-green'), 'invite button is green with valid email address').to.be['true'];\n                });\n\n                // submit the invite form\n                click('button[type=\"submit\"]');\n\n                andThen(function () {\n                    // it redirects to the home / \"content\" screen\n                    (0, _chai.expect)(currentURL(), 'url after submitting invites').to.equal('/');\n                });\n            });\n\n            (0, _mocha.it)('handles server validation errors in step 2');\n            (0, _mocha.it)('handles server validation errors in step 3');\n\n            (0, _mocha.it)('handles invalid origin error on step 2', function () {\n                // mimick the API response for an invalid origin\n                server.post('/authentication/token', function () {\n                    return new _emberCliMirage['default'].Response(401, {}, {\n                        errors: [{\n                            errorType: 'UnauthorizedError',\n                            message: 'Access Denied from url: unknown.com. Please use the url configured in config.js.'\n                        }]\n                    });\n                });\n\n                (0, _ghostTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                visit('/setup/two');\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n                click('.btn-green');\n\n                andThen(function () {\n                    // button should not be spinning\n                    (0, _chai.expect)(find('.btn-green .spinner').length, 'button has spinner').to.equal(0);\n                    // we should show an error message\n                    (0, _chai.expect)(find('.main-error').text(), 'error text').to.equal('Access Denied from url: unknown.com. Please use the url configured in config.js.');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/helpers/adapter-error', ['exports', 'ember'], function (exports, _ember) {\n    exports.errorOverride = errorOverride;\n    exports.errorReset = errorReset;\n\n    // This is needed for testing error responses in acceptance tests\n    // See http://williamsbdev.com/posts/testing-rsvp-errors-handled-globally/\n\n    var originalException = undefined;\n    var originalLoggerError = undefined;\n\n    function errorOverride() {\n        originalException = _ember['default'].Test.adapter.exception;\n        originalLoggerError = _ember['default'].Logger.error;\n        _ember['default'].Test.adapter.exception = function () {};\n        _ember['default'].Logger.error = function () {};\n    }\n\n    function errorReset() {\n        _ember['default'].Test.adapter.exception = originalException;\n        _ember['default'].Logger.error = originalLoggerError;\n    }\n});","define('ghost/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = destroyApp;\n\n    function destroyApp(application) {\n        _ember['default'].run(application, 'destroy');\n    }\n});","define('ghost/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('ghost/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ghost/tests/helpers/start-app', 'ghost/tests/helpers/destroy-app'], function (exports, _qunit, _ghostTestsHelpersStartApp, _ghostTestsHelpersDestroyApp) {\n    exports['default'] = function (name) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        (0, _qunit.module)(name, {\n            beforeEach: function beforeEach() {\n                this.application = (0, _ghostTestsHelpersStartApp['default'])();\n\n                if (options.beforeEach) {\n                    options.beforeEach.apply(this, arguments);\n                }\n            },\n\n            afterEach: function afterEach() {\n                (0, _ghostTestsHelpersDestroyApp['default'])(this.application);\n\n                if (options.afterEach) {\n                    options.afterEach.apply(this, arguments);\n                }\n            }\n        });\n    };\n});","define('ghost/tests/helpers/resolver', ['exports', 'ember-resolver', 'ghost/config/environment'], function (exports, _emberResolver, _ghostConfigEnvironment) {\n\n    var resolver = _emberResolver['default'].create();\n\n    resolver.namespace = {\n        modulePrefix: _ghostConfigEnvironment['default'].modulePrefix,\n        podModulePrefix: _ghostConfigEnvironment['default'].podModulePrefix\n    };\n\n    exports['default'] = resolver;\n});","define('ghost/tests/helpers/start-app', ['exports', 'ember', 'ghost/app', 'ghost/config/environment'], function (exports, _ember, _ghostApp, _ghostConfigEnvironment) {\n    exports['default'] = startApp;\n    var merge = _ember['default'].merge;\n    var run = _ember['default'].run;\n\n    function startApp(attrs) {\n        var attributes = merge({}, _ghostConfigEnvironment['default'].APP);\n        var application = undefined;\n\n        // use defaults, but you can override;\n        attributes = merge(attributes, attrs);\n\n        run(function () {\n            application = _ghostApp['default'].create(attributes);\n            application.setupForTesting();\n            application.injectTestHelpers();\n        });\n\n        return application;\n    }\n});","define('ghost/tests/integration/adapters/tag-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    (0, _emberMocha.describeModule)('adapter:tag', 'Integration: Adapter: tag', {\n        integration: true\n    }, function () {\n        var server = undefined,\n            store = undefined;\n\n        beforeEach(function () {\n            store = this.container.lookup('service:store');\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads tags from regular endpoint when all are fetched', function (done) {\n            server.get('/ghost/api/v0.1/tags/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ tags: [{\n                        id: 1,\n                        name: 'Tag 1',\n                        slug: 'tag-1'\n                    }, {\n                        id: 2,\n                        name: 'Tag 2',\n                        slug: 'tag-2'\n                    }] })];\n            });\n\n            store.findAll('tag', { reload: true }).then(function (tags) {\n                (0, _chai.expect)(tags).to.be.ok;\n                (0, _chai.expect)(tags.objectAtContent(0).get('name')).to.equal('Tag 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('loads tag from slug endpoint when single tag is queried and slug is passed in', function (done) {\n            server.get('/ghost/api/v0.1/tags/slug/tag-1/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ tags: [{\n                        id: 1,\n                        slug: 'tag-1',\n                        name: 'Tag 1'\n                    }] })];\n            });\n\n            store.queryRecord('tag', { slug: 'tag-1' }).then(function (tag) {\n                (0, _chai.expect)(tag).to.be.ok;\n                (0, _chai.expect)(tag.get('name')).to.equal('Tag 1');\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/adapters/user-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    (0, _emberMocha.describeModule)('adapter:user', 'Integration: Adapter: user', {\n        integration: true\n    }, function () {\n        var server = undefined,\n            store = undefined;\n\n        beforeEach(function () {\n            store = this.container.lookup('service:store');\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads users from regular endpoint when all are fetched', function (done) {\n            server.get('/ghost/api/v0.1/users/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        name: 'User 1',\n                        slug: 'user-1'\n                    }, {\n                        id: 2,\n                        name: 'User 2',\n                        slug: 'user-2'\n                    }] })];\n            });\n\n            store.findAll('user', { reload: true }).then(function (users) {\n                (0, _chai.expect)(users).to.be.ok;\n                (0, _chai.expect)(users.objectAtContent(0).get('name')).to.equal('User 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('loads user from slug endpoint when single user is queried and slug is passed in', function (done) {\n            server.get('/ghost/api/v0.1/users/slug/user-1/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        slug: 'user-1',\n                        name: 'User 1'\n                    }] })];\n            });\n\n            store.queryRecord('user', { slug: 'user-1' }).then(function (user) {\n                (0, _chai.expect)(user).to.be.ok;\n                (0, _chai.expect)(user.get('name')).to.equal('User 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles \"include\" parameter when querying single user via slug', function (done) {\n            server.get('/ghost/api/v0.1/users/slug/user-1/', function (request) {\n                var params = request.queryParams;\n                (0, _chai.expect)(params.include, 'include query').to.equal('roles,count.posts');\n\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        slug: 'user-1',\n                        name: 'User 1',\n                        count: {\n                            posts: 5\n                        }\n                    }] })];\n            });\n\n            store.queryRecord('user', { slug: 'user-1', include: 'count.posts' }).then(function (user) {\n                (0, _chai.expect)(user).to.be.ok;\n                (0, _chai.expect)(user.get('name')).to.equal('User 1');\n                (0, _chai.expect)(user.get('count.posts')).to.equal(5);\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-alert-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-alert', 'Integration: Component: gh-alert', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 28\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alert', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 19], [1, 26]]]]], [], []]], ['loc', [null, [1, 0], [1, 28]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('article.gh-alert')).to.have.length(1);\n            var $alert = this.$('.gh-alert');\n\n            (0, _chai.expect)($alert.text()).to.match(/Test message/);\n        });\n\n        (0, _emberMocha.it)('maps message types to CSS classes', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 28\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alert', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 19], [1, 26]]]]], [], []]], ['loc', [null, [1, 0], [1, 28]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $alert = this.$('.gh-alert');\n\n            this.set('message.type', 'success');\n            (0, _chai.expect)($alert.hasClass('gh-alert-green'), 'success class isn\\'t green').to.be['true'];\n\n            this.set('message.type', 'error');\n            (0, _chai.expect)($alert.hasClass('gh-alert-red'), 'success class isn\\'t red').to.be['true'];\n\n            this.set('message.type', 'warn');\n            (0, _chai.expect)($alert.hasClass('gh-alert-yellow'), 'success class isn\\'t yellow').to.be['true'];\n\n            this.set('message.type', 'info');\n            (0, _chai.expect)($alert.hasClass('gh-alert-blue'), 'success class isn\\'t blue').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-alerts-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var run = _ember['default'].run;\n\n    var emberA = _ember['default'].A;\n\n    var notificationsStub = _ember['default'].Service.extend({\n        alerts: emberA()\n    });\n\n    (0, _emberMocha.describeComponent)('gh-alerts', 'Integration: Component: gh-alerts', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('notifications', { as: 'notifications' });\n\n            this.set('notifications.alerts', [{ message: 'First', type: 'error' }, { message: 'Second', type: 'warn' }]);\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 13\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-alerts', ['loc', [null, [1, 0], [1, 13]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-alerts').length).to.equal(1);\n            (0, _chai.expect)(this.$('.gh-alerts').children().length).to.equal(2);\n\n            this.set('notifications.alerts', emberA());\n            (0, _chai.expect)(this.$('.gh-alerts').children().length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('triggers \"notify\" action when message count changes', function () {\n            var expectedCount = 0;\n\n            // test double for notify action\n            this.set('notify', function (count) {\n                return (0, _chai.expect)(count).to.equal(expectedCount);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 36\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alerts', [], ['notify', ['subexpr', 'action', [['get', 'notify', ['loc', [null, [1, 27], [1, 33]]]]], [], ['loc', [null, [1, 19], [1, 34]]]]], ['loc', [null, [1, 0], [1, 36]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            expectedCount = 3;\n            this.get('notifications.alerts').pushObject({ message: 'Third', type: 'success' });\n\n            expectedCount = 0;\n            this.set('notifications.alerts', emberA());\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-cm-editor-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeComponent)('gh-cm-editor', 'Integration: Component: gh-cm-editor', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('handles editor events', function () {\n            this.set('text', '');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 44\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-cm-editor', [], ['class', 'gh-input', 'value', ['subexpr', '@mut', [['get', 'text', ['loc', [null, [1, 38], [1, 42]]]]], [], []]], ['loc', [null, [1, 0], [1, 44]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var input = this.$('.gh-input');\n\n            (0, _chai.expect)(input.hasClass('focused'), 'has focused class on first render').to.be['false'];\n\n            run(function () {\n                input.find('textarea').trigger('focus');\n            });\n\n            (0, _chai.expect)(input.hasClass('focused'), 'has focused class after focus').to.be['true'];\n\n            run(function () {\n                input.find('textarea').trigger('blur');\n            });\n\n            (0, _chai.expect)(input.hasClass('focused'), 'loses focused class on blur').to.be['false'];\n\n            run(function () {\n                // access CodeMirror directly as it doesn't pick up changes\n                // to the textarea\n                var cm = input.find('.CodeMirror').get(0).CodeMirror;\n                cm.setValue('Testing');\n            });\n\n            (0, _chai.expect)(this.get('text'), 'text value after CM editor change').to.equal('Testing');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-navigation-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ghost/controllers/settings/navigation'], function (exports, _chai, _emberMocha, _ember, _ghostControllersSettingsNavigation) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeComponent)('gh-navigation', 'Integration: Component: gh-navigation', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'triple-curlies'\n                            },\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 86\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createElement('div');\n                            dom.setAttribute(el1, 'class', 'js-gh-blognav');\n                            var el2 = dom.createElement('div');\n                            dom.setAttribute(el2, 'class', 'gh-blognav-item');\n                            dom.appendChild(el1, el2);\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 104\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-navigation', [], [], 0, null, ['loc', [null, [1, 0], [1, 104]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('section.gh-view')).to.have.length(1);\n            (0, _chai.expect)(this.$('.ui-sortable')).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('triggers reorder action', function () {\n            var _this = this;\n\n            var navItems = [];\n            var expectedOldIndex = -1;\n            var expectedNewIndex = -1;\n\n            navItems.pushObject(_ghostControllersSettingsNavigation.NavItem.create({ label: 'First', url: '/first' }));\n            navItems.pushObject(_ghostControllersSettingsNavigation.NavItem.create({ label: 'Second', url: '/second' }));\n            navItems.pushObject(_ghostControllersSettingsNavigation.NavItem.create({ label: 'Third', url: '/third' }));\n            navItems.pushObject(_ghostControllersSettingsNavigation.NavItem.create({ label: '', url: '', last: true }));\n            this.set('navigationItems', navItems);\n            this.set('blogUrl', 'http://localhost:2368');\n\n            this.on('moveItem', function (oldIndex, newIndex) {\n                (0, _chai.expect)(oldIndex).to.equal(expectedOldIndex);\n                (0, _chai.expect)(newIndex).to.equal(expectedNewIndex);\n            });\n\n            run(function () {\n                _this.render(_ember['default'].HTMLBars.template((function () {\n                    var child0 = (function () {\n                        var child0 = (function () {\n                            return {\n                                meta: {\n                                    'fragmentReason': false,\n                                    'revision': 'Ember@2.2.0',\n                                    'loc': {\n                                        'source': null,\n                                        'start': {\n                                            'line': 4,\n                                            'column': 24\n                                        },\n                                        'end': {\n                                            'line': 6,\n                                            'column': 24\n                                        }\n                                    }\n                                },\n                                isEmpty: false,\n                                arity: 1,\n                                cachedFragment: null,\n                                hasRendered: false,\n                                buildFragment: function buildFragment(dom) {\n                                    var el0 = dom.createDocumentFragment();\n                                    var el1 = dom.createTextNode('                            ');\n                                    dom.appendChild(el0, el1);\n                                    var el1 = dom.createComment('');\n                                    dom.appendChild(el0, el1);\n                                    var el1 = dom.createTextNode('\\n');\n                                    dom.appendChild(el0, el1);\n                                    return el0;\n                                },\n                                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                                    var morphs = new Array(1);\n                                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                                    return morphs;\n                                },\n                                statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [5, 49], [5, 56]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'blogUrl', ['loc', [null, [5, 65], [5, 72]]]]], [], []], 'addItem', 'addItem', 'deleteItem', 'deleteItem', 'updateUrl', 'updateUrl'], ['loc', [null, [5, 28], [5, 138]]]]],\n                                locals: ['navItem'],\n                                templates: []\n                            };\n                        })();\n\n                        return {\n                            meta: {\n                                'fragmentReason': false,\n                                'revision': 'Ember@2.2.0',\n                                'loc': {\n                                    'source': null,\n                                    'start': {\n                                        'line': 2,\n                                        'column': 16\n                                    },\n                                    'end': {\n                                        'line': 8,\n                                        'column': 16\n                                    }\n                                }\n                            },\n                            isEmpty: false,\n                            arity: 0,\n                            cachedFragment: null,\n                            hasRendered: false,\n                            buildFragment: function buildFragment(dom) {\n                                var el0 = dom.createDocumentFragment();\n                                var el1 = dom.createTextNode('                    ');\n                                dom.appendChild(el0, el1);\n                                var el1 = dom.createElement('form');\n                                dom.setAttribute(el1, 'id', 'settings-navigation');\n                                dom.setAttribute(el1, 'class', 'gh-blognav js-gh-blognav');\n                                dom.setAttribute(el1, 'novalidate', 'novalidate');\n                                var el2 = dom.createTextNode('\\n');\n                                dom.appendChild(el1, el2);\n                                var el2 = dom.createComment('');\n                                dom.appendChild(el1, el2);\n                                var el2 = dom.createTextNode('                    ');\n                                dom.appendChild(el1, el2);\n                                dom.appendChild(el0, el1);\n                                var el1 = dom.createTextNode('\\n');\n                                dom.appendChild(el0, el1);\n                                return el0;\n                            },\n                            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                                var morphs = new Array(1);\n                                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n                                return morphs;\n                            },\n                            statements: [['block', 'each', [['get', 'navigationItems', ['loc', [null, [4, 32], [4, 47]]]]], [], 0, null, ['loc', [null, [4, 24], [6, 33]]]]],\n                            locals: [],\n                            templates: [child0]\n                        };\n                    })();\n\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 8,\n                                    'column': 34\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createTextNode('\\n');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['block', 'gh-navigation', [], ['moveItem', 'moveItem'], 0, null, ['loc', [null, [2, 16], [8, 34]]]]],\n                        locals: [],\n                        templates: [child0]\n                    };\n                })()));\n            });\n\n            // check it renders the nav item rows\n            (0, _chai.expect)(this.$('.gh-blognav-item')).to.have.length(4);\n\n            // move second item up one\n            expectedOldIndex = 1;\n            expectedNewIndex = 0;\n            run(function () {\n                _ember['default'].$(_this.$('.gh-blognav-item')[1]).simulateDragSortable({\n                    move: -1,\n                    handle: '.gh-blognav-grab'\n                });\n            });\n\n            // move second item down one\n            expectedOldIndex = 1;\n            expectedNewIndex = 2;\n            run(function () {\n                _ember['default'].$(_this.$('.gh-blognav-item')[1]).simulateDragSortable({\n                    move: 1,\n                    handle: '.gh-blognav-grab'\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-navitem-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ghost/controllers/settings/navigation'], function (exports, _chai, _emberMocha, _ember, _ghostControllersSettingsNavigation) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeComponent)('gh-navitem', 'Integration: Component: gh-navitem', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.set('baseUrl', 'http://localhost:2368');\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url' }));\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-label').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-url').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(1);\n\n            // doesn't show any errors\n            (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be['false'];\n            (0, _chai.expect)($item.find('.error').length).to.equal(0);\n            (0, _chai.expect)($item.find('.response:visible').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('doesn\\'t show drag handle for last item', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url', last: true }));\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('shows add button for last item', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url', last: true }));\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-add').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('triggers delete action', function () {\n            var _this = this;\n\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url' }));\n\n            var deleteActionCallCount = 0;\n            this.on('deleteItem', function (navItem) {\n                (0, _chai.expect)(navItem).to.equal(_this.get('navItem'));\n                deleteActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 70\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'deleteItem', 'deleteItem'], ['loc', [null, [1, 0], [1, 70]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-delete').trigger('click');\n\n            (0, _chai.expect)(deleteActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers add action', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url', last: true }));\n\n            var addActionCallCount = 0;\n            this.on('add', function () {\n                addActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 60\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'addItem', 'add'], ['loc', [null, [1, 0], [1, 60]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-add').trigger('click');\n\n            (0, _chai.expect)(addActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers update action', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: 'Test', url: '/url' }));\n\n            var updateActionCallCount = 0;\n            this.on('update', function () {\n                updateActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 65\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'updateUrl', 'update'], ['loc', [null, [1, 0], [1, 65]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-url input').trigger('blur');\n\n            (0, _chai.expect)(updateActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('displays inline errors', function () {\n            this.set('navItem', _ghostControllersSettingsNavigation.NavItem.create({ label: '', url: '' }));\n            this.get('navItem').validate();\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-label').hasClass('error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-label .response').text().trim()).to.equal('You must specify a label');\n            (0, _chai.expect)($item.find('.gh-blognav-url').hasClass('error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-url .response').text().trim()).to.equal('You must specify a URL or relative path');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-navitem-url-input-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var run = _ember['default'].run;\n\n    // we want baseUrl to match the running domain so relative URLs are\n    // handled as expected (browser auto-sets the domain when using a.href)\n    var currentUrl = window.location.protocol + '//' + window.location.host + '/';\n\n    (0, _emberMocha.describeComponent)('gh-navitem-url-input', 'Integration: Component: gh-navitem-url-input', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            // set defaults\n            this.set('baseUrl', currentUrl);\n            this.set('url', '');\n            this.set('isLast', false);\n        });\n\n        (0, _emberMocha.it)('renders correctly with blank url', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input).to.have.length(1);\n            (0, _chai.expect)($input.hasClass('gh-input')).to.be['true'];\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n        });\n\n        (0, _emberMocha.it)('renders correctly with relative urls', function () {\n            this.set('url', '/about');\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about');\n\n            this.set('url', '/about#contact');\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about#contact');\n        });\n\n        (0, _emberMocha.it)('renders correctly with absolute urls', function () {\n            this.set('url', 'https://example.com:2368/#test');\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal('https://example.com:2368/#test');\n\n            this.set('url', 'mailto:test@example.com');\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n\n            this.set('url', 'tel:01234-5678-90');\n            (0, _chai.expect)($input.val()).to.equal('tel:01234-5678-90');\n\n            this.set('url', '//protocol-less-url.com');\n            (0, _chai.expect)($input.val()).to.equal('//protocol-less-url.com');\n\n            this.set('url', '#anchor');\n            (0, _chai.expect)($input.val()).to.equal('#anchor');\n        });\n\n        (0, _emberMocha.it)('deletes base URL on backspace', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = _ember['default'].$.Event('keydown');\n                e.keyCode = 8;\n                $input.trigger(e);\n            });\n            (0, _chai.expect)($input.val()).to.equal('');\n        });\n\n        (0, _emberMocha.it)('deletes base URL on delete', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = _ember['default'].$.Event('keydown');\n                e.keyCode = 46;\n                $input.trigger(e);\n            });\n            (0, _chai.expect)($input.val()).to.equal('');\n        });\n\n        (0, _emberMocha.it)('adds base url to relative urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val('/about').trigger('input');\n            });\n            run(function () {\n                $input.trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about');\n        });\n\n        (0, _emberMocha.it)('adds \"mailto:\" to email addresses on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val('test@example.com').trigger('input');\n            });\n            run(function () {\n                $input.trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n\n            // ensure we don't double-up on the mailto:\n            run(function () {\n                $input.trigger('blur');\n            });\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n        });\n\n        (0, _emberMocha.it)('doesn\\'t add base url to invalid urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var changeValue = function changeValue(value) {\n                run(function () {\n                    $input.val(value).trigger('input').trigger('blur');\n                });\n            };\n\n            changeValue('with spaces');\n            (0, _chai.expect)($input.val()).to.equal('with spaces');\n\n            changeValue('/with spaces');\n            (0, _chai.expect)($input.val()).to.equal('/with spaces');\n        });\n\n        (0, _emberMocha.it)('doesn\\'t mangle invalid urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val(currentUrl + ' /test').trigger('input').trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + ' /test');\n        });\n\n        (0, _emberMocha.it)('toggles .fake-placeholder on focus', function () {\n            this.set('isLast', true);\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.hasClass('fake-placeholder')).to.be['true'];\n\n            run(function () {\n                $input.trigger('focus');\n            });\n            (0, _chai.expect)($input.hasClass('fake-placeholder')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on blur', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            $input.trigger('blur');\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on enter', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = _ember['default'].$.Event('keypress');\n                e.keyCode = 13;\n                $input.trigger(e);\n            });\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on CMD-S', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = _ember['default'].$.Event('keydown');\n                e.keyCode = 83;\n                e.metaKey = true;\n                $input.trigger(e);\n            });\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('sends absolute urls straight through to change action', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = url;\n                run(function () {\n                    $input.val(url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('http://example.com');\n            testUrl('http://example.com/');\n            testUrl('https://example.com');\n            testUrl('//example.com');\n            testUrl('//localhost:1234');\n            testUrl('#anchor');\n            testUrl('mailto:test@example.com');\n            testUrl('tel:12345-567890');\n            testUrl('javascript:alert(\"testing\");');\n        });\n\n        (0, _emberMocha.it)('strips base url from relative urls before sending to change action', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = '/' + url;\n                run(function () {\n                    $input.val('' + currentUrl + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('about');\n            testUrl('about#contact');\n            testUrl('test/nested');\n        });\n\n        (0, _emberMocha.it)('handles a baseUrl with a path component', function () {\n            var expectedUrl = '';\n\n            this.set('baseUrl', currentUrl + 'blog/');\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = url;\n                run(function () {\n                    $input.val(currentUrl + 'blog' + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('/about');\n            testUrl('/about#contact');\n            testUrl('/test/nested');\n        });\n\n        (0, _emberMocha.it)('handles links to subdomains of blog domain', function () {\n            var expectedUrl = '';\n\n            this.set('baseUrl', 'http://example.com/');\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'last', ['subexpr', '@mut', [['get', 'isLast', ['loc', [null, [2, 68], [2, 74]]]]], [], []], 'change', 'updateUrl'], ['loc', [null, [2, 16], [2, 95]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            expectedUrl = 'http://test.example.com/';\n            run(function () {\n                $input.val(expectedUrl).trigger('input').trigger('blur');\n            });\n            (0, _chai.expect)($input.val()).to.equal(expectedUrl);\n        });\n    });\n});\n/* jshint scripturl:true */","define('ghost/tests/integration/components/gh-notification-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-notification', 'Integration: Component: gh-notification', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 35\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-notification', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 26], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('article.gh-notification')).to.have.length(1);\n            var $notification = this.$('.gh-notification');\n\n            (0, _chai.expect)($notification.hasClass('gh-notification-passive')).to.be['true'];\n            (0, _chai.expect)($notification.text()).to.match(/Test message/);\n        });\n\n        (0, _emberMocha.it)('maps message types to CSS classes', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 35\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-notification', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 26], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $notification = this.$('.gh-notification');\n\n            this.set('message.type', 'success');\n            (0, _chai.expect)($notification.hasClass('gh-notification-green'), 'success class isn\\'t green').to.be['true'];\n\n            this.set('message.type', 'error');\n            (0, _chai.expect)($notification.hasClass('gh-notification-red'), 'success class isn\\'t red').to.be['true'];\n\n            this.set('message.type', 'warn');\n            (0, _chai.expect)($notification.hasClass('gh-notification-yellow'), 'success class isn\\'t yellow').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-notifications-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var Service = _ember['default'].Service;\n    var run = _ember['default'].run;\n\n    var emberA = _ember['default'].A;\n\n    var notificationsStub = Service.extend({\n        notifications: emberA()\n    });\n\n    (0, _emberMocha.describeComponent)('gh-notifications', 'Integration: Component: gh-notifications', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('notifications', { as: 'notifications' });\n\n            this.set('notifications.notifications', [{ message: 'First', type: 'error' }, { message: 'Second', type: 'warn' }]);\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 20\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-notifications', ['loc', [null, [1, 0], [1, 20]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-notifications').length).to.equal(1);\n\n            (0, _chai.expect)(this.$('.gh-notifications').children().length).to.equal(2);\n\n            this.set('notifications.notifications', emberA());\n            (0, _chai.expect)(this.$('.gh-notifications').children().length).to.equal(0);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-profile-image-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var run = _ember['default'].run;\n\n    var pathsStub = _ember['default'].Service.extend({\n        url: {\n            api: function api() {\n                return '';\n            },\n            asset: function asset(src) {\n                return src;\n            }\n        }\n    });\n\n    (0, _emberMocha.describeComponent)('gh-profile-image', 'Integration: Component: gh-profile-image', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.register('service:ghost-paths', pathsStub);\n            this.inject.service('ghost-paths', { as: 'ghost-paths' });\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.set('email', '');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []]], ['loc', [null, [2, 16], [2, 48]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('immediately renders the gravatar if valid email supplied', function () {\n            var email = 'test@example.com';\n            var expectedUrl = 'http://www.gravatar.com/avatar/' + md5(email) + '?s=100&d=blank';\n\n            this.set('email', email);\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []], 'size', 100, 'debounce', 300], ['loc', [null, [2, 16], [2, 70]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.gravatar-img').attr('style'), 'gravatar image style').to.equal('background-image: url(' + expectedUrl + ')');\n        });\n\n        (0, _emberMocha.it)('throttles gravatar loading as email is changed', function (done) {\n            var _this = this;\n\n            var email = 'test@example.com';\n            var expectedUrl = 'http://www.gravatar.com/avatar/' + md5(email) + '?s=100&d=blank';\n\n            this.set('email', 'test');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []], 'size', 100, 'debounce', 300], ['loc', [null, [2, 16], [2, 70]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.gravatar-img').length, '.gravatar-img not shown for invalid email').to.equal(0);\n\n            run(function () {\n                _this.set('email', email);\n            });\n\n            (0, _chai.expect)(this.$('.gravatar-img').length, '.gravatar-img not immediately changed on email change').to.equal(0);\n\n            _ember['default'].run.later(this, function () {\n                (0, _chai.expect)(this.$('.gravatar-img').length, '.gravatar-img still not shown before throttle timeout').to.equal(0);\n            }, 250);\n\n            _ember['default'].run.later(this, function () {\n                (0, _chai.expect)(this.$('.gravatar-img').attr('style'), '.gravatar-img style after timeout').to.equal('background-image: url(' + expectedUrl + ')');\n                done();\n            }, 400);\n        });\n    });\n});\n/* jshint expr:true */\n/* global md5 */","define('ghost/tests/integration/components/gh-tag-settings-form-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ember-data'], function (exports, _chai, _emberMocha, _ember, _emberData) {\n    var run = _ember['default'].run;\n\n    var configStub = _ember['default'].Service.extend({\n        blogUrl: 'http://localhost:2368'\n    });\n\n    (0, _emberMocha.describeComponent)('gh-tag-settings-form', 'Integration: Component: gh-tag-settings-form', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n            var tag = _ember['default'].Object.create({\n                id: 1,\n                name: 'Test',\n                slug: 'test',\n                description: 'Description.',\n                meta_title: 'Meta Title',\n                meta_description: 'Meta description',\n                errors: _emberData['default'].Errors.create(),\n                hasValidated: []\n            });\n            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */\n\n            this.set('tag', tag);\n            this.set('actions.setProperty', function (property, value) {\n                // this should be overridden if a call is expected\n                console.error('setProperty called \\'' + property + ': ' + value + '\\'');\n            });\n\n            this.register('service:config', configStub);\n            this.inject.service('config', { as: 'config' });\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('has the correct title', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.tag-settings-pane h4').text(), 'existing tag title').to.equal('Tag Settings');\n\n            this.set('tag.isNew', true);\n            (0, _chai.expect)(this.$('.tag-settings-pane h4').text(), 'new tag title').to.equal('New Tag');\n        });\n\n        (0, _emberMocha.it)('renders main settings', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.image-uploader').length, 'displays image uploader').to.equal(1);\n            (0, _chai.expect)(this.$('input[name=\"name\"]').val(), 'name field value').to.equal('Test');\n            (0, _chai.expect)(this.$('input[name=\"slug\"]').val(), 'slug field value').to.equal('test');\n            (0, _chai.expect)(this.$('textarea[name=\"description\"]').val(), 'description field value').to.equal('Description.');\n            (0, _chai.expect)(this.$('input[name=\"meta_title\"]').val(), 'meta_title field value').to.equal('Meta Title');\n            (0, _chai.expect)(this.$('textarea[name=\"meta_description\"]').val(), 'meta_description field value').to.equal('Meta description');\n        });\n\n        (0, _emberMocha.it)('can switch between main/meta settings', function () {\n            var _this = this;\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'main settings are displayed by default').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-out-right'), 'meta settings are hidden by default').to.be['true'];\n\n            run(function () {\n                _this.$('.meta-data-button').click();\n            });\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-out-left'), 'main settings are hidden after clicking Meta Data button').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-in'), 'meta settings are displayed after clicking Meta Data button').to.be['true'];\n\n            run(function () {\n                _this.$('.back').click();\n            });\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'main settings are displayed after clicking \"back\"').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-out-right'), 'meta settings are hidden after clicking \"back\"').to.be['true'];\n        });\n\n        (0, _emberMocha.it)('has one-way binding for properties', function () {\n            var _this2 = this;\n\n            this.set('actions.setProperty', function () {\n                // noop\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            run(function () {\n                _this2.$('input[name=\"name\"]').val('New name');\n                _this2.$('input[name=\"slug\"]').val('new-slug');\n                _this2.$('textarea[name=\"description\"]').val('New description');\n                _this2.$('input[name=\"meta_title\"]').val('New meta_title');\n                _this2.$('textarea[name=\"meta_description\"]').val('New meta_description');\n            });\n\n            (0, _chai.expect)(this.get('tag.name'), 'tag name').to.equal('Test');\n            (0, _chai.expect)(this.get('tag.slug'), 'tag slug').to.equal('test');\n            (0, _chai.expect)(this.get('tag.description'), 'tag description').to.equal('Description.');\n            (0, _chai.expect)(this.get('tag.meta_title'), 'tag meta_title').to.equal('Meta Title');\n            (0, _chai.expect)(this.get('tag.meta_description'), 'tag meta_description').to.equal('Meta description');\n        });\n\n        (0, _emberMocha.it)('triggers setProperty action on blur of all fields', function () {\n            var _this3 = this;\n\n            var expectedProperty = '';\n            var expectedValue = '';\n\n            this.set('actions.setProperty', function (property, value) {\n                (0, _chai.expect)(property, 'property').to.equal(expectedProperty);\n                (0, _chai.expect)(value, 'value').to.equal(expectedValue);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            expectedProperty = 'name';\n            expectedValue = 'new-slug';\n            run(function () {\n                _this3.$('input[name=\"name\"]').val('New name');\n            });\n\n            expectedProperty = 'url';\n            expectedValue = 'new-slug';\n            run(function () {\n                _this3.$('input[name=\"slug\"]').val('new-slug');\n            });\n\n            expectedProperty = 'description';\n            expectedValue = 'New description';\n            run(function () {\n                _this3.$('textarea[name=\"description\"]').val('New description');\n            });\n\n            expectedProperty = 'meta_title';\n            expectedValue = 'New meta_title';\n            run(function () {\n                _this3.$('input[name=\"meta_title\"]').val('New meta_title');\n            });\n\n            expectedProperty = 'meta_description';\n            expectedValue = 'New meta_description';\n            run(function () {\n                _this3.$('textarea[name=\"meta_description\"]').val('New meta_description');\n            });\n        });\n\n        (0, _emberMocha.it)('displays error messages for validated fields', function () {\n            var errors = this.get('tag.errors');\n            var hasValidated = this.get('tag.hasValidated');\n\n            errors.add('name', 'must be present');\n            hasValidated.push('name');\n\n            errors.add('slug', 'must be present');\n            hasValidated.push('slug');\n\n            errors.add('description', 'is too long');\n            hasValidated.push('description');\n\n            errors.add('meta_title', 'is too long');\n            hasValidated.push('meta_title');\n\n            errors.add('meta_description', 'is too long');\n            hasValidated.push('meta_description');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            var nameFormGroup = this.$('input[name=\"name\"]').closest('.form-group');\n            (0, _chai.expect)(nameFormGroup.hasClass('error'), 'name form group has error state').to.be['true'];\n            (0, _chai.expect)(nameFormGroup.find('.response').length, 'name form group has error message').to.equal(1);\n\n            var slugFormGroup = this.$('input[name=\"slug\"]').closest('.form-group');\n            (0, _chai.expect)(slugFormGroup.hasClass('error'), 'slug form group has error state').to.be['true'];\n            (0, _chai.expect)(slugFormGroup.find('.response').length, 'slug form group has error message').to.equal(1);\n\n            var descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n            (0, _chai.expect)(descriptionFormGroup.hasClass('error'), 'description form group has error state').to.be['true'];\n\n            var metaTitleFormGroup = this.$('input[name=\"meta_title\"]').closest('.form-group');\n            (0, _chai.expect)(metaTitleFormGroup.hasClass('error'), 'meta_title form group has error state').to.be['true'];\n            (0, _chai.expect)(metaTitleFormGroup.find('.response').length, 'meta_title form group has error message').to.equal(1);\n\n            var metaDescriptionFormGroup = this.$('textarea[name=\"meta_description\"]').closest('.form-group');\n            (0, _chai.expect)(metaDescriptionFormGroup.hasClass('error'), 'meta_description form group has error state').to.be['true'];\n            (0, _chai.expect)(metaDescriptionFormGroup.find('.response').length, 'meta_description form group has error message').to.equal(1);\n        });\n\n        (0, _emberMocha.it)('displays char count for text fields', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            var descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n            (0, _chai.expect)(descriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('12');\n\n            var metaDescriptionFormGroup = this.$('textarea[name=\"meta_description\"]').closest('.form-group');\n            (0, _chai.expect)(metaDescriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('16');\n        });\n\n        (0, _emberMocha.it)('renders SEO title preview', function () {\n            var _this4 = this;\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-title').text(), 'displays meta title if present').to.equal('Meta Title');\n\n            run(function () {\n                _this4.set('tag.meta_title', '');\n            });\n            (0, _chai.expect)(this.$('.seo-preview-title').text(), 'falls back to tag name without meta_title').to.equal('Test');\n\n            run(function () {\n                _this4.set('tag.name', new Array(151).join('x'));\n            });\n            var expectedLength = 70 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-title').text().length, 'cuts title to max 70 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('renders SEO URL preview', function () {\n            var _this5 = this;\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-link').text(), 'adds url and tag prefix').to.equal('http://localhost:2368/tag/test/');\n\n            run(function () {\n                _this5.set('tag.slug', new Array(151).join('x'));\n            });\n            var expectedLength = 70 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-link').text().length, 'cuts slug to max 70 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('renders SEO description preview', function () {\n            var _this6 = this;\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-description').text(), 'displays meta description if present').to.equal('Meta description');\n\n            run(function () {\n                _this6.set('tag.meta_description', '');\n            });\n            (0, _chai.expect)(this.$('.seo-preview-description').text(), 'falls back to tag description without meta_description').to.equal('Description.');\n\n            run(function () {\n                _this6.set('tag.description', new Array(200).join('x'));\n            });\n            var expectedLength = 156 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-description').text().length, 'cuts description to max 156 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('resets if a new tag is received', function () {\n            var _this7 = this;\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            run(function () {\n                _this7.$('.meta-data-button').click();\n            });\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-in'), 'meta data pane is shown').to.be['true'];\n\n            run(function () {\n                _this7.set('tag', _ember['default'].Object.create({ id: '2' }));\n            });\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'resets to main settings').to.be['true'];\n        });\n\n        (0, _emberMocha.it)('triggers delete tag modal on delete click', function (done) {\n            var _this8 = this;\n\n            this.set('actions.openModal', function (modalName, model) {\n                (0, _chai.expect)(modalName, 'passed modal name').to.equal('delete-tag');\n                (0, _chai.expect)(model, 'passed model').to.equal(_this8.get('tag'));\n                done();\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'openModal', 'openModal'], ['loc', [null, [2, 16], [2, 105]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            run(function () {\n                _this8.$('.tag-delete-button').click();\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireTemplateStringsForConcatenation */","define('ghost/tests/integration/components/gh-tags-management-container-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n\n    (0, _emberMocha.describeComponent)('gh-tags-management-container', 'Integration: Component: gh-tags-management-container', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('tags', []);\n            this.set('selectedTag', null);\n            this.on('enteredMobile', function () {\n                // noop\n            });\n            this.on('leftMobile', function () {\n                // noop\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 2,\n                                    'column': 137\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-tags-management-container', [], ['tags', ['subexpr', '@mut', [['get', 'tags', ['loc', [null, [2, 53], [2, 57]]]]], [], []], 'selectedTag', ['subexpr', '@mut', [['get', 'selectedTag', ['loc', [null, [2, 70], [2, 81]]]]], [], []], 'enteredMobile', 'enteredMobile', 'leftMobile', 'leftMobile'], 0, null, ['loc', [null, [2, 16], [2, 170]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/integration/components/gh-validation-status-container-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ember-data'], function (exports, _chai, _emberMocha, _ember, _emberData) {\n\n    (0, _emberMocha.describeComponent)('gh-validation-status-container', 'Integration: Component: gh-validation-status-container', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            var testObject = new _ember['default'].Object();\n            testObject.set('name', 'Test');\n            testObject.set('hasValidated', []);\n            testObject.set('errors', _emberData['default'].Errors.create());\n\n            this.set('testObject', testObject);\n        });\n\n        (0, _emberMocha.it)('has no success/error class by default', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['false'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('has success class when valid', function () {\n            this.get('testObject.hasValidated').push('name');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['true'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('has error class when invalid', function () {\n            this.get('testObject.hasValidated').push('name');\n            this.get('testObject.errors').add('name', 'has error');\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['false'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('still renders if hasValidated is undefined', function () {\n            this.set('testObject.hasValidated', undefined);\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.2.0',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.2.0',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/test-helper', ['exports', 'ghost/tests/helpers/resolver', 'ember-mocha'], function (exports, _ghostTestsHelpersResolver, _emberMocha) {\n\n    (0, _emberMocha.setResolver)(_ghostTestsHelpersResolver['default']);\n\n    /* jshint ignore:start */\n    mocha.setup({\n        timeout: 15000,\n        slow: 500\n    });\n    /* jshint ignore:end */\n});","define('ghost/tests/unit/components/gh-alert-test', ['exports', 'chai', 'ember-mocha', 'sinon'], function (exports, _chai, _emberMocha, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-alert', 'Unit: Component: gh-alert', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('closes notification through notifications service', function () {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            this.$().find('button').click();\n\n            (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-app-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-app', 'Unit: Component: gh-app', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-content-preview-content-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-content-preview-content', 'Unit: Component: gh-content-preview-content', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-editor-save-button-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-editor-save-button', 'Unit: Component: gh-editor-save-button', {\n        unit: true,\n        needs: ['component:gh-dropdown-button', 'component:gh-dropdown', 'component:gh-spin-button', 'service:dropdown']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-editor-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-editor', 'Unit: Component: gh-editor', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-infinite-scroll-box-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-infinite-scroll-box', 'Unit: Component: gh-infinite-scroll-box', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-infinite-scroll-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-infinite-scroll', 'Unit: Component: gh-infinite-scroll', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-navitem-url-input-test', ['exports', 'ember', 'chai', 'ember-mocha'], function (exports, _ember, _chai, _emberMocha) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeComponent)('gh-navitem-url-input', 'Unit: Component: gh-navitem-url-input', {\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('identifies a URL as the base URL', function () {\n            var component = this.subject({\n                url: '',\n                baseUrl: 'http://example.com/'\n            });\n\n            this.render();\n\n            run(function () {\n                component.set('value', 'http://example.com/');\n            });\n\n            (0, _chai.expect)(component.get('isBaseUrl')).to.be.ok;\n\n            run(function () {\n                component.set('value', 'http://example.com/go/');\n            });\n\n            (0, _chai.expect)(component.get('isBaseUrl')).to.not.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-notification-test', ['exports', 'chai', 'ember-mocha', 'sinon'], function (exports, _chai, _emberMocha, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-notification', 'Unit: Component: gh-notification', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('closes notification through notifications service', function () {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            this.$().find('button').click();\n\n            (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('closes notification when animationend event is triggered', function (done) {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            // shorten the animation delay to speed up test\n            this.$().css('animation-delay', '0.1s');\n            setTimeout(function () {\n                (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n                done();\n            }, 150);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-posts-list-item-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-posts-list-item', 'Unit: Component: gh-posts-list-item', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-search-input-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-search-input', 'Unit: Component: gh-search-input', {\n        unit: true,\n        needs: ['component:gh-selectize']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-select-native-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-select-native', 'Unit: Component: gh-select-native', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-selectize-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var run = _ember['default'].run;\n\n    var emberA = _ember['default'].A;\n\n    (0, _emberMocha.describeComponent)('gh-selectize', 'Unit: Component: gh-selectize', {\n        // Specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar'],\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('re-orders selection when selectize order is changed', function () {\n            var component = this.subject();\n\n            run(function () {\n                component.set('content', emberA(['item 1', 'item 2', 'item 3']));\n                component.set('selection', emberA(['item 2', 'item 3']));\n                component.set('multiple', true);\n            });\n\n            this.render();\n\n            run(function () {\n                component._selectize.setValue(['item 3', 'item 2']);\n            });\n\n            (0, _chai.expect)(component.get('value'), 'component value').to.deep.equal(['item 3', 'item 2']);\n            (0, _chai.expect)(component.get('selection'), 'component selection').to.deep.equal(['item 3', 'item 2']);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-spin-button-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-spin-button', 'Unit: Component: gh-spin-button', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-trim-focus-input_test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-trim-focus-input', 'Unit: Component: gh-trim-focus-input', {\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('trims value on focusOut', function () {\n            var component = this.subject({\n                value: 'some random stuff   '\n            });\n\n            this.render();\n\n            component.$().focusout();\n            expect(component.$().val()).to.equal('some random stuff');\n        });\n\n        (0, _emberMocha.it)('does not have the autofocus attribute if not set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: false\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('has the autofocus attribute if set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: true\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.be.ok;\n        });\n    });\n});","define('ghost/tests/unit/components/gh-url-preview_test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-url-preview', 'Unit: Component: gh-url-preview', {\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('generates the correct preview URL with a prefix', function () {\n            var component = this.subject({\n                prefix: 'tag',\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\n        });\n\n        (0, _emberMocha.it)('generates the correct preview URL without a prefix', function () {\n            var component = this.subject({\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\n        });\n    });\n});","define('ghost/tests/unit/components/gh-user-active-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-user-active', 'Unit: Component: gh-user-active', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/components/gh-user-invited-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-user-invited', 'Unit: Component: gh-user-invited', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/controllers/post-settings-menu-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n    var run = _ember['default'].run;\n\n    function K() {\n        return this;\n    }\n\n    (0, _emberMocha.describeModule)('controller:post-settings-menu', 'Unit: Controller: post-settings-menu', {\n        needs: ['controller:application', 'service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('slugValue is one-way bound to model.slug', function () {\n            var controller = this.subject({\n                model: _ember['default'].Object.create({\n                    slug: 'a-slug'\n                })\n            });\n\n            expect(controller.get('model.slug')).to.equal('a-slug');\n            expect(controller.get('slugValue')).to.equal('a-slug');\n\n            run(function () {\n                controller.set('model.slug', 'changed-slug');\n\n                expect(controller.get('slugValue')).to.equal('changed-slug');\n            });\n\n            run(function () {\n                controller.set('slugValue', 'changed-directly');\n\n                expect(controller.get('model.slug')).to.equal('changed-slug');\n                expect(controller.get('slugValue')).to.equal('changed-directly');\n            });\n\n            run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.slug', 'should-update');\n\n                expect(controller.get('slugValue')).to.equal('should-update');\n            });\n        });\n\n        (0, _emberMocha.it)('metaTitleScratch is one-way bound to model.meta_title', function () {\n            var controller = this.subject({\n                model: _ember['default'].Object.create({\n                    meta_title: 'a title'\n                })\n            });\n\n            expect(controller.get('model.meta_title')).to.equal('a title');\n            expect(controller.get('metaTitleScratch')).to.equal('a title');\n\n            run(function () {\n                controller.set('model.meta_title', 'a different title');\n\n                expect(controller.get('metaTitleScratch')).to.equal('a different title');\n            });\n\n            run(function () {\n                controller.set('metaTitleScratch', 'changed directly');\n\n                expect(controller.get('model.meta_title')).to.equal('a different title');\n                expect(controller.get('metaTitleScratch')).to.equal('changed directly');\n            });\n\n            run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.meta_title', 'should update');\n\n                expect(controller.get('metaTitleScratch')).to.equal('should update');\n            });\n        });\n\n        (0, _emberMocha.it)('metaDescriptionScratch is one-way bound to model.meta_description', function () {\n            var controller = this.subject({\n                model: _ember['default'].Object.create({\n                    meta_description: 'a description'\n                })\n            });\n\n            expect(controller.get('model.meta_description')).to.equal('a description');\n            expect(controller.get('metaDescriptionScratch')).to.equal('a description');\n\n            run(function () {\n                controller.set('model.meta_description', 'a different description');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('a different description');\n            });\n\n            run(function () {\n                controller.set('metaDescriptionScratch', 'changed directly');\n\n                expect(controller.get('model.meta_description')).to.equal('a different description');\n                expect(controller.get('metaDescriptionScratch')).to.equal('changed directly');\n            });\n\n            run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.meta_description', 'should update');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('should update');\n            });\n        });\n\n        describe('seoTitle', function () {\n            (0, _emberMocha.it)('should be the meta_title if one exists', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'should not be used'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            (0, _emberMocha.it)('should default to the title if an explicit meta-title does not exist', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        titleScratch: 'should be the meta-title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('should be the meta-title');\n            });\n\n            (0, _emberMocha.it)('should be the meta_title if both title and meta_title exist', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            (0, _emberMocha.it)('should revert to the title if explicit meta_title is removed', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n\n                run(function () {\n                    controller.set('model.meta_title', '');\n\n                    expect(controller.get('seoTitle')).to.equal('a title');\n                });\n            });\n\n            (0, _emberMocha.it)('should truncate to 70 characters with an appended ellipsis', function () {\n                var longTitle = new Array(100).join('a');\n                var controller = this.subject({\n                    model: _ember['default'].Object.create()\n                });\n\n                expect(longTitle.length).to.equal(99);\n\n                run(function () {\n                    var expected = longTitle.substr(0, 70) + '&hellip;';\n\n                    controller.set('metaTitleScratch', longTitle);\n\n                    expect(controller.get('seoTitle').toString().length).to.equal(78);\n                    expect(controller.get('seoTitle').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoDescription', function () {\n            (0, _emberMocha.it)('should be the meta_description if one exists', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        meta_description: 'a description'\n                    })\n                });\n\n                expect(controller.get('seoDescription')).to.equal('a description');\n            });\n\n            _emberMocha.it.skip('should be generated from the rendered markdown if not explicitly set', function () {\n                // can't test right now because the rendered markdown is being pulled\n                // from the DOM via jquery\n            });\n\n            (0, _emberMocha.it)('should truncate to 156 characters with an appended ellipsis', function () {\n                var longDescription = new Array(200).join('a');\n                var controller = this.subject({\n                    model: _ember['default'].Object.create()\n                });\n\n                expect(longDescription.length).to.equal(199);\n\n                run(function () {\n                    var expected = longDescription.substr(0, 156) + '&hellip;';\n\n                    controller.set('metaDescriptionScratch', longDescription);\n\n                    expect(controller.get('seoDescription').toString().length).to.equal(164);\n                    expect(controller.get('seoDescription').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoURL', function () {\n            (0, _emberMocha.it)('should be the URL of the blog if no post slug exists', function () {\n                var controller = this.subject({\n                    config: _ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _ember['default'].Object.create()\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/');\n            });\n\n            (0, _emberMocha.it)('should be the URL of the blog plus the post slug', function () {\n                var controller = this.subject({\n                    config: _ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _ember['default'].Object.create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n            });\n\n            (0, _emberMocha.it)('should update when the post slug changes', function () {\n                var controller = this.subject({\n                    config: _ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _ember['default'].Object.create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n\n                run(function () {\n                    controller.set('model.slug', 'changed-slug');\n\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\n                });\n            });\n\n            (0, _emberMocha.it)('should truncate a long URL to 70 characters with an appended ellipsis', function () {\n                var blogURL = 'http://my-ghost-blog.com';\n                var longSlug = new Array(75).join('a');\n                var controller = this.subject({\n                    config: _ember['default'].Object.create({ blogUrl: blogURL }),\n                    model: _ember['default'].Object.create({ slug: longSlug })\n                });\n                var expected = undefined;\n\n                expect(longSlug.length).to.equal(74);\n\n                expected = blogURL + '/' + longSlug + '/';\n                expected = expected.substr(0, 70) + '&hellip;';\n\n                expect(controller.get('seoURL').toString().length).to.equal(78);\n                expect(controller.get('seoURL').toString()).to.equal(expected);\n            });\n        });\n\n        describe('togglePage', function () {\n            (0, _emberMocha.it)('should toggle the page property', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        page: false,\n                        isNew: true\n                    })\n                });\n\n                expect(controller.get('model.page')).to.not.be.ok;\n\n                run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        page: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        page: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('toggleFeatured', function () {\n            (0, _emberMocha.it)('should toggle the featured property', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        featured: false,\n                        isNew: true\n                    })\n                });\n\n                run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        featured: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        featured: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('generateAndSetSlug', function () {\n            (0, _emberMocha.it)('should generate a slug and set it on the destination', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            return _ember['default'].RSVP.resolve(str + '-slug');\n                        }\n                    }),\n                    model: _ember['default'].Object.create({ slug: '' })\n                });\n\n                run(function () {\n                    controller.set('model.titleScratch', 'title');\n                    controller.generateAndSetSlug('model.slug');\n\n                    expect(controller.get('model.slug')).to.equal('');\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('title-slug');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            return _ember['default'].RSVP.resolve(str + '-slug');\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                expect(controller.get('model.slug')).to.equal('whatever');\n\n                run(function () {\n                    controller.set('model.titleScratch', 'title');\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n\n        describe('titleObserver', function () {\n            (0, _emberMocha.it)('should invoke generateAndSetSlug if the post is new and a title has not been set', function (done) {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({ isNew: true }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.not.be.ok;\n\n                run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    run.later(function () {\n                        expect(controller.get('invoked')).to.equal(1);\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            (0, _emberMocha.it)('should invoke generateAndSetSlug if the post title is \"(Untitled)\"', function (done) {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        isNew: false,\n                        title: '(Untitled)'\n                    }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.equal('(Untitled)');\n\n                run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    run.later(function () {\n                        expect(controller.get('invoked')).to.equal(1);\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            (0, _emberMocha.it)('should not invoke generateAndSetSlug if the post is new but has a title', function (done) {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        isNew: true,\n                        title: 'a title'\n                    }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.equal('a title');\n\n                run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    run.later(function () {\n                        expect(controller.get('invoked')).to.equal(0);\n\n                        done();\n                    }, 800);\n                });\n            });\n        });\n\n        describe('updateSlug', function () {\n            (0, _emberMocha.it)('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\n                var controller = this.subject({\n                    model: _ember['default'].Object.create({\n                        slug: 'slug'\n                    })\n                });\n\n                run(function () {\n                    // unchanged\n                    controller.set('slugValue', 'slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                run(function () {\n                    // unchanged after trim\n                    controller.set('slugValue', 'slug  ');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                run(function () {\n                    // blank\n                    controller.set('slugValue', '');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n            });\n\n            (0, _emberMocha.it)('should not set a new slug if the server-generated slug matches existing slug', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise = _ember['default'].RSVP.resolve(str.split('#')[0]);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                run(function () {\n                    controller.set('slugValue', 'whatever#slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should not set a new slug if the only change is to the appended increment value', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var sanitizedStr = str.replace(/[^a-zA-Z]/g, '');\n                            var promise = _ember['default'].RSVP.resolve(sanitizedStr + '-2');\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                run(function () {\n                    controller.set('slugValue', 'whatever!');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should set the slug if the new slug is different', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise = _ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever',\n                        save: K\n                    })\n                });\n\n                run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post when the slug changes and the post is not new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise = _ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(1);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post when the slug changes and the post is new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise = _ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _ember['default'].Object.create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(0);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n    });\n});\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost/tests/unit/controllers/settings/general-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeModule)('controller:settings/general', 'Unit: Controller: settings/general', {\n        needs: ['service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('isDatedPermalinks should be correct', function () {\n            var controller = this.subject({\n                model: _ember['default'].Object.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            expect(controller.get('isDatedPermalinks')).to.be.ok;\n\n            run(function () {\n                controller.set('model.permalinks', '/:slug/');\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('setting isDatedPermalinks should switch between dated and slug', function () {\n            var controller = this.subject({\n                model: _ember['default'].Object.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            run(function () {\n                controller.set('isDatedPermalinks', false);\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:slug/');\n            });\n\n            run(function () {\n                controller.set('isDatedPermalinks', true);\n\n                expect(controller.get('isDatedPermalinks')).to.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:year/:month/:day/:slug/');\n            });\n        });\n\n        (0, _emberMocha.it)('themes should be correct', function () {\n            var themes = [];\n            var controller = undefined;\n\n            themes.push({\n                name: 'casper',\n                active: true,\n                'package': {\n                    name: 'Casper',\n                    version: '1.1.5'\n                }\n            });\n\n            themes.push({\n                name: 'rasper',\n                'package': {\n                    name: 'Rasper',\n                    version: '1.0.0'\n                }\n            });\n\n            controller = this.subject({\n                model: _ember['default'].Object.create({\n                    availableThemes: themes\n                })\n            });\n\n            themes = controller.get('themes');\n            expect(themes).to.be.an.Array;\n            expect(themes.length).to.equal(2);\n            expect(themes.objectAt(0).name).to.equal('casper');\n            expect(themes.objectAt(0).active).to.be.ok;\n            expect(themes.objectAt(0).label).to.equal('Casper - 1.1.5');\n            expect(themes.objectAt(1).name).to.equal('rasper');\n            expect(themes.objectAt(1).active).to.not.be.ok;\n            expect(themes.objectAt(1).label).to.equal('Rasper - 1.0.0');\n        });\n    });\n});","define('ghost/tests/unit/controllers/settings/navigation-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ghost/controllers/settings/navigation'], function (exports, _chai, _emberMocha, _ember, _ghostControllersSettingsNavigation) {\n    var run = _ember['default'].run;\n\n    var navSettingJSON = '[\\n    {\"label\":\"Home\",\"url\":\"/\"},\\n    {\"label\":\"JS Test\",\"url\":\"javascript:alert(\\'hello\\');\"},\\n    {\"label\":\"About\",\"url\":\"/about\"},\\n    {\"label\":\"Sub Folder\",\"url\":\"/blah/blah\"},\\n    {\"label\":\"Telephone\",\"url\":\"tel:01234-567890\"},\\n    {\"label\":\"Mailto\",\"url\":\"mailto:test@example.com\"},\\n    {\"label\":\"External\",\"url\":\"https://example.com/testing?query=test#anchor\"},\\n    {\"label\":\"No Protocol\",\"url\":\"//example.com\"}\\n]';\n\n    (0, _emberMocha.describeModule)('controller:settings/navigation', 'Unit: Controller: settings/navigation', {\n        // Specify the other units that are required for this test.\n        needs: ['service:config', 'service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n            var ctrl = this.subject();\n            ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n            (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n        });\n\n        (0, _emberMocha.it)('navigationItems: generates list of NavItems', function () {\n            var ctrl = this.subject();\n            var lastItem = undefined;\n\n            run(function () {\n                ctrl.set('model', _ember['default'].Object.create({ navigation: navSettingJSON }));\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(9);\n                (0, _chai.expect)(ctrl.get('navigationItems.firstObject.label')).to.equal('Home');\n                (0, _chai.expect)(ctrl.get('navigationItems.firstObject.url')).to.equal('/');\n                (0, _chai.expect)(ctrl.get('navigationItems.firstObject.last')).to.be['false'];\n\n                // adds a blank item as last one is complete\n                lastItem = ctrl.get('navigationItems.lastObject');\n                (0, _chai.expect)(lastItem.get('label')).to.equal('');\n                (0, _chai.expect)(lastItem.get('url')).to.equal('');\n                (0, _chai.expect)(lastItem.get('last')).to.be['true'];\n            });\n        });\n\n        (0, _emberMocha.it)('navigationItems: adds blank item if navigation setting is empty', function () {\n            var ctrl = this.subject();\n            var lastItem = undefined;\n\n            run(function () {\n                ctrl.set('model', _ember['default'].Object.create({ navigation: null }));\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(1);\n\n                lastItem = ctrl.get('navigationItems.lastObject');\n                (0, _chai.expect)(lastItem.get('label')).to.equal('');\n                (0, _chai.expect)(lastItem.get('url')).to.equal('');\n            });\n        });\n\n        (0, _emberMocha.it)('updateLastNavItem: correctly sets \"last\" properties', function () {\n            var ctrl = this.subject();\n            var item1 = undefined,\n                item2 = undefined;\n\n            run(function () {\n                ctrl.set('model', _ember['default'].Object.create({ navigation: navSettingJSON }));\n\n                item1 = ctrl.get('navigationItems.lastObject');\n                (0, _chai.expect)(item1.get('last')).to.be['true'];\n\n                ctrl.get('navigationItems').addObject(_ember['default'].Object.create({ label: 'Test', url: '/test' }));\n\n                item2 = ctrl.get('navigationItems.lastObject');\n                (0, _chai.expect)(item2.get('last')).to.be['true'];\n                (0, _chai.expect)(item1.get('last')).to.be['false'];\n            });\n        });\n\n        (0, _emberMocha.it)('save: validates nav items', function (done) {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('model', _ember['default'].Object.create({ navigation: '[\\n                    {\"label\":\"First\",   \"url\":\"/\"},\\n                    {\"label\":\"\",        \"url\":\"/second\"},\\n                    {\"label\":\"Third\",   \"url\":\"\"}\\n                ]' }));\n                // blank item won't get added because the last item is incomplete\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(3);\n\n                ctrl.save().then(function passedValidation() {\n                    (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n                    done();\n                })['catch'](function failedValidation() {\n                    var navItems = ctrl.get('navigationItems');\n                    (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n                    (0, _chai.expect)(navItems[1].get('errors.firstObject.attribute')).to.equal('label');\n                    (0, _chai.expect)(navItems[2].get('errors.firstObject.attribute')).to.equal('url');\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('save: generates new navigation JSON', function (done) {\n            var ctrl = this.subject();\n            var model = _ember['default'].Object.create({ navigation: {} });\n            var expectedJSON = '[{\"label\":\"New\",\"url\":\"/new\"}]';\n\n            model.save = function () {\n                var _this = this;\n\n                return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n                    return resolve(_this);\n                });\n            };\n\n            run(function () {\n                ctrl.set('model', model);\n\n                // remove inserted blank item so validation works\n                ctrl.get('navigationItems').removeObject(ctrl.get('navigationItems.firstObject'));\n                // add new object\n                ctrl.get('navigationItems').addObject(_ghostControllersSettingsNavigation.NavItem.create({ label: 'New', url: '/new' }));\n\n                ctrl.save().then(function success() {\n                    (0, _chai.expect)(ctrl.get('model.navigation')).to.equal(expectedJSON);\n                    done();\n                }, function failure() {\n                    (0, _chai.assert)(false, 'save failed with valid data');\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('action - addItem: adds item to navigationItems', function () {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('navigationItems', [_ghostControllersSettingsNavigation.NavItem.create({ label: 'First', url: '/first', last: true })]);\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(1);\n                ctrl.send('addItem');\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(2);\n                (0, _chai.expect)(ctrl.get('navigationItems.firstObject.last')).to.be['false'];\n                (0, _chai.expect)(ctrl.get('navigationItems.lastObject.label')).to.equal('');\n                (0, _chai.expect)(ctrl.get('navigationItems.lastObject.url')).to.equal('');\n                (0, _chai.expect)(ctrl.get('navigationItems.lastObject.last')).to.be['true'];\n            });\n        });\n\n        (0, _emberMocha.it)('action - addItem: doesn\\'t insert new item if last object is incomplete', function () {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('navigationItems', [_ghostControllersSettingsNavigation.NavItem.create({ label: '', url: '', last: true })]);\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(1);\n                ctrl.send('addItem');\n                (0, _chai.expect)(ctrl.get('navigationItems.length')).to.equal(1);\n            });\n        });\n\n        (0, _emberMocha.it)('action - deleteItem: removes item from navigationItems', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostControllersSettingsNavigation.NavItem.create({ label: 'First', url: '/first' }), _ghostControllersSettingsNavigation.NavItem.create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('navigationItems', navItems);\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('label')).to.deep.equal(['First', 'Second']);\n                ctrl.send('deleteItem', ctrl.get('navigationItems.firstObject'));\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('label')).to.deep.equal(['Second']);\n            });\n        });\n\n        (0, _emberMocha.it)('action - moveItem: updates navigationItems list', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostControllersSettingsNavigation.NavItem.create({ label: 'First', url: '/first' }), _ghostControllersSettingsNavigation.NavItem.create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('navigationItems', navItems);\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('label')).to.deep.equal(['First', 'Second']);\n                ctrl.send('moveItem', 1, 0);\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('label')).to.deep.equal(['Second', 'First']);\n            });\n        });\n\n        (0, _emberMocha.it)('action - updateUrl: updates URL on navigationItem', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostControllersSettingsNavigation.NavItem.create({ label: 'First', url: '/first' }), _ghostControllersSettingsNavigation.NavItem.create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('navigationItems', navItems);\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('url')).to.deep.equal(['/first', '/second']);\n                ctrl.send('updateUrl', '/new', ctrl.get('navigationItems.firstObject'));\n                (0, _chai.expect)(ctrl.get('navigationItems').mapBy('url')).to.deep.equal(['/new', '/second']);\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/helpers/gh-user-can-admin-test', ['exports', 'ember-mocha', 'ghost/helpers/gh-user-can-admin'], function (exports, _emberMocha, _ghostHelpersGhUserCanAdmin) {\n\n    describe('Unit: Helper: gh-user-can-admin', function () {\n        // Mock up roles and test for truthy\n        describe('Owner role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return true;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - can be Admin', function () {\n                var result = (0, _ghostHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Administrator role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return true;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - can be Admin', function () {\n                var result = (0, _ghostHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Editor and Author roles', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - cannot be Admin', function () {\n                var result = (0, _ghostHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(false);\n            });\n        });\n    });\n});","define('ghost/tests/unit/helpers/is-equal-test', ['exports', 'chai', 'mocha', 'ghost/helpers/is-equal'], function (exports, _chai, _mocha, _ghostHelpersIsEqual) {\n\n    (0, _mocha.describe)('Unit: Helper: is-equal', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var result = (0, _ghostHelpersIsEqual.isEqual)([42, 42]);\n\n            (0, _chai.expect)(result).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/helpers/is-not-test', ['exports', 'chai', 'mocha', 'ghost/helpers/is-not'], function (exports, _chai, _mocha, _ghostHelpersIsNot) {\n\n    (0, _mocha.describe)('Unit: Helper: is-not', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var result = (0, _ghostHelpersIsNot.isNot)(false);\n\n            (0, _chai.expect)(result).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/mixins/infinite-scroll-test', ['exports', 'chai', 'mocha', 'ember', 'ghost/mixins/infinite-scroll'], function (exports, _chai, _mocha, _ember, _ghostMixinsInfiniteScroll) {\n\n    (0, _mocha.describe)('Unit: Mixin: infinite-scroll', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var InfiniteScrollObject = _ember['default'].Object.extend(_ghostMixinsInfiniteScroll['default']);\n            var subject = InfiniteScrollObject.create();\n\n            (0, _chai.expect)(subject).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/mixins/validation-engine-test', ['exports', 'chai', 'mocha', 'ember', 'ghost/mixins/validation-engine'], function (exports, _chai, _mocha, _ember, _ghostMixinsValidationEngine) {\n\n    (0, _mocha.describe)('ValidationEngineMixin', function () {\n        // Replace this with your real tests.\n        // it('works', function () {\n        //     var ValidationEngineObject = Ember.Object.extend(ValidationEngineMixin);\n        //     var subject = ValidationEngineObject.create();\n        //     expect(subject).to.be.ok;\n        // });\n\n        (0, _mocha.describe)('#validate', function () {\n            (0, _mocha.it)('loads the correct validator');\n            (0, _mocha.it)('rejects if the validator doesn\\'t exist');\n            (0, _mocha.it)('resolves with valid object');\n            (0, _mocha.it)('rejects with invalid object');\n            (0, _mocha.it)('clears all existing errors');\n\n            (0, _mocha.describe)('with a specified property', function () {\n                (0, _mocha.it)('resolves with valid property');\n                (0, _mocha.it)('rejects with invalid property');\n                (0, _mocha.it)('adds property to hasValidated array');\n                (0, _mocha.it)('clears existing error on specified property');\n            });\n\n            (0, _mocha.it)('handles a passed in model');\n            (0, _mocha.it)('uses this.model if available');\n        });\n\n        (0, _mocha.describe)('#save', function () {\n            (0, _mocha.it)('calls validate');\n            (0, _mocha.it)('rejects with validation errors');\n            (0, _mocha.it)('calls object\\'s #save if validation passes');\n            (0, _mocha.it)('skips validation if it\\'s a deletion');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/models/post-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('post', 'Unit: Model: post', {\n        needs: ['model:user', 'model:tag', 'model:role']\n    }, function () {\n        (0, _emberMocha.it)('has a validation type of \"post\"', function () {\n            var model = this.subject();\n\n            expect(model.validationType).to.equal('post');\n        });\n\n        (0, _emberMocha.it)('isPublished and isDraft are correct', function () {\n            var model = this.subject({\n                status: 'published'\n            });\n\n            expect(model.get('isPublished')).to.be.ok;\n            expect(model.get('isDraft')).to.not.be.ok;\n\n            _ember['default'].run(function () {\n                model.set('status', 'draft');\n\n                expect(model.get('isPublished')).to.not.be.ok;\n                expect(model.get('isDraft')).to.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('isAuthoredByUser is correct', function () {\n            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n            var model = this.subject({\n                author_id: 15\n            });\n            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */\n            var user = _ember['default'].Object.create({ id: '15' });\n\n            expect(model.isAuthoredByUser(user)).to.be.ok;\n\n            _ember['default'].run(function () {\n                model.set('author_id', 1);\n\n                expect(model.isAuthoredByUser(user)).to.not.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('updateTags removes and deletes old tags', function () {\n            var model = this.subject();\n\n            _ember['default'].run(this, function () {\n                var modelTags = model.get('tags');\n                var tag1 = this.store().createRecord('tag', { id: '1' });\n                var tag2 = this.store().createRecord('tag', { id: '2' });\n                var tag3 = this.store().createRecord('tag');\n\n                // During testing a record created without an explicit id will get\n                // an id of 'fixture-n' instead of null\n                tag3.set('id', null);\n\n                modelTags.pushObject(tag1);\n                modelTags.pushObject(tag2);\n                modelTags.pushObject(tag3);\n\n                expect(model.get('tags.length')).to.equal(3);\n\n                model.updateTags();\n\n                expect(model.get('tags.length')).to.equal(2);\n                expect(model.get('tags.firstObject.id')).to.equal('1');\n                expect(model.get('tags').objectAt(1).get('id')).to.equal('2');\n                expect(tag1.get('isDeleted')).to.not.be.ok;\n                expect(tag2.get('isDeleted')).to.not.be.ok;\n                expect(tag3.get('isDeleted')).to.be.ok;\n            });\n        });\n    });\n});","define('ghost/tests/unit/models/role-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeModel)('role', 'Unit: Model: role', function () {\n        (0, _emberMocha.it)('provides a lowercase version of the name', function () {\n            var model = this.subject({\n                name: 'Author'\n            });\n\n            expect(model.get('name')).to.equal('Author');\n            expect(model.get('lowerCaseName')).to.equal('author');\n\n            run(function () {\n                model.set('name', 'Editor');\n\n                expect(model.get('name')).to.equal('Editor');\n                expect(model.get('lowerCaseName')).to.equal('editor');\n            });\n        });\n    });\n});","define('ghost/tests/unit/models/setting-test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('setting', 'Unit: Model: setting', function () {\n        (0, _emberMocha.it)('has a validation type of \"setting\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('setting');\n        });\n    });\n});","define('ghost/tests/unit/models/tag-test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('tag', 'Unit: Model: tag', function () {\n        (0, _emberMocha.it)('has a validation type of \"tag\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('tag');\n        });\n    });\n});","define('ghost/tests/unit/models/user-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n    var run = _ember['default'].run;\n\n    (0, _emberMocha.describeModel)('user', 'Unit: Model: user', {\n        needs: ['model:role', 'serializer:application', 'serializer:user']\n    }, function () {\n        (0, _emberMocha.it)('has a validation type of \"user\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('user');\n        });\n\n        (0, _emberMocha.it)('active property is correct', function () {\n            var model = this.subject({\n                status: 'active'\n            });\n\n            expect(model.get('active')).to.be.ok;\n\n            ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n                run(function () {\n                    model.set('status', status);\n                });\n                expect(model.get('status')).to.be.ok;\n            });\n\n            run(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('active')).to.not.be.ok;\n\n            run(function () {\n                model.set('status', 'invited');\n            });\n            expect(model.get('active')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('invited property is correct', function () {\n            var model = this.subject({\n                status: 'invited'\n            });\n\n            expect(model.get('invited')).to.be.ok;\n\n            run(function () {\n                model.set('status', 'invited-pending');\n            });\n            expect(model.get('invited')).to.be.ok;\n\n            run(function () {\n                model.set('status', 'active');\n            });\n            expect(model.get('invited')).to.not.be.ok;\n\n            run(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('invited')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('pending property is correct', function () {\n            var model = this.subject({\n                status: 'invited-pending'\n            });\n\n            expect(model.get('pending')).to.be.ok;\n\n            run(function () {\n                model.set('status', 'invited');\n            });\n            expect(model.get('pending')).to.not.be.ok;\n\n            run(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('pending')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('role property is correct', function () {\n            var _this = this;\n\n            var model = this.subject();\n\n            run(function () {\n                var role = _this.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Author' } } });\n                model.get('roles').pushObject(role);\n            });\n            expect(model.get('role.name')).to.equal('Author');\n\n            run(function () {\n                var role = _this.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Editor' } } });\n                model.set('role', role);\n            });\n            expect(model.get('role.name')).to.equal('Editor');\n        });\n\n        (0, _emberMocha.it)('isAuthor property is correct', function () {\n            var _this2 = this;\n\n            var model = this.subject();\n\n            run(function () {\n                var role = _this2.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Author' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isAuthor')).to.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isEditor property is correct', function () {\n            var _this3 = this;\n\n            var model = this.subject();\n\n            run(function () {\n                var role = _this3.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Editor' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isEditor')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isAdmin property is correct', function () {\n            var _this4 = this;\n\n            var model = this.subject();\n\n            run(function () {\n                var role = _this4.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Administrator' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isAdmin')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isOwner property is correct', function () {\n            var _this5 = this;\n\n            var model = this.subject();\n\n            run(function () {\n                var role = _this5.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Owner' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isOwner')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n        });\n    });\n});","define('ghost/tests/unit/services/config-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n\n    (0, _emberMocha.describeModule)('service:config', 'Unit: Service: config', {\n        // Specify the other units that are required for this test.\n        // needs: ['service:foo']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('exists', function () {\n            var service = this.subject();\n            (0, _chai.expect)(service).to.be.ok;\n        });\n\n        (0, _emberMocha.it)('correctly parses a client secret', function () {\n            _ember['default'].$('<meta>').attr('name', 'env-clientSecret').attr('content', '23e435234423').appendTo('head');\n\n            var service = this.subject();\n\n            (0, _chai.expect)(service.get('clientSecret')).to.equal('23e435234423');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/services/notifications-test', ['exports', 'ember', 'sinon', 'chai', 'ember-mocha'], function (exports, _ember, _sinon, _chai, _emberMocha) {\n    var run = _ember['default'].run;\n    var get = _ember['default'].get;\n\n    var emberA = _ember['default'].A;\n\n    (0, _emberMocha.describeModule)('service:notifications', 'Unit: Service: notifications', {\n        // Specify the other units that are required for this test.\n        // needs: ['model:notification']\n    }, function () {\n        beforeEach(function () {\n            this.subject().set('content', emberA());\n            this.subject().set('delayedNotifications', emberA());\n        });\n\n        (0, _emberMocha.it)('filters alerts/notifications', function () {\n            var notifications = this.subject();\n\n            // wrapped in run-loop to enure alerts/notifications CPs are updated\n            run(function () {\n                notifications.showAlert('Alert');\n                notifications.showNotification('Notification');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Alert');\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.firstObject.message')).to.equal('Notification');\n        });\n\n        (0, _emberMocha.it)('#handleNotification deals with DS.Notification notifications', function () {\n            var notifications = this.subject();\n            var notification = _ember['default'].Object.create({ message: '<h1>Test</h1>', status: 'alert' });\n\n            notification.toJSON = function () {};\n\n            notifications.handleNotification(notification);\n\n            notification = notifications.get('alerts')[0];\n\n            // alerts received from the server should be marked html safe\n            (0, _chai.expect)(notification.get('message')).to.have.property('toHTML');\n        });\n\n        (0, _emberMocha.it)('#handleNotification defaults to notification if no status supplied', function () {\n            var notifications = this.subject();\n\n            notifications.handleNotification({ message: 'Test' }, false);\n\n            (0, _chai.expect)(notifications.get('content')).to.deep.include({ message: 'Test', status: 'notification' });\n        });\n\n        (0, _emberMocha.it)('#showAlert adds POJO alerts', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAlert('Test Alert', { type: 'error' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts')).to.deep.include({ message: 'Test Alert', status: 'alert', type: 'error', key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showAlert adds delayed notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('Test Alert', { type: 'error', delayed: true });\n            });\n\n            (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({ message: 'Test Alert', status: 'notification', type: 'error', key: undefined });\n        });\n\n        // in order to cater for complex keys that are suitable for i18n\n        // we split on the second period and treat the resulting base as\n        // the key for duplicate checking\n        (0, _emberMocha.it)('#showAlert clears duplicates', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAlert('Kept');\n                notifications.showAlert('Duplicate', { key: 'duplicate.key.fail' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n\n            run(function () {\n                notifications.showAlert('Duplicate with new message', { key: 'duplicate.key.success' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n            (0, _chai.expect)(notifications.get('alerts.lastObject.message')).to.equal('Duplicate with new message');\n        });\n\n        (0, _emberMocha.it)('#showNotification adds POJO notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('Test Notification', { type: 'success' });\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.include({ message: 'Test Notification', status: 'notification', type: 'success', key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showNotification adds delayed notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('Test Notification', { delayed: true });\n            });\n\n            (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({ message: 'Test Notification', status: 'notification', type: undefined, key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showNotification clears existing notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('First');\n                notifications.showNotification('Second');\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'Second', status: 'notification', type: undefined, key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#showNotification keeps existing notifications if doNotCloseNotifications option passed', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('First');\n                notifications.showNotification('Second', { doNotCloseNotifications: true });\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(2);\n        });\n\n        // TODO: review whether this can be removed once it's no longer used by validations\n        (0, _emberMocha.it)('#showErrors adds multiple notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showErrors([{ message: 'First' }, { message: 'Second' }]);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'First', status: 'notification', type: 'error', key: undefined }, { message: 'Second', status: 'notification', type: 'error', key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#showAPIError adds single json response error', function () {\n            var notifications = this.subject();\n            var resp = { jqXHR: { responseJSON: { error: 'Single error' } } };\n\n            run(function () {\n                notifications.showAPIError(resp);\n            });\n\n            var notification = notifications.get('alerts.firstObject');\n            (0, _chai.expect)(get(notification, 'message')).to.equal('Single error');\n            (0, _chai.expect)(get(notification, 'status')).to.equal('alert');\n            (0, _chai.expect)(get(notification, 'type')).to.equal('error');\n            (0, _chai.expect)(get(notification, 'key')).to.equal('api-error');\n        });\n\n        // used to display validation errors returned from the server\n        (0, _emberMocha.it)('#showAPIError adds multiple json response errors', function () {\n            var notifications = this.subject();\n            var resp = { jqXHR: { responseJSON: { errors: ['First error', 'Second error'] } } };\n\n            run(function () {\n                notifications.showAPIError(resp);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'First error', status: 'notification', type: 'error', key: undefined }, { message: 'Second error', status: 'notification', type: 'error', key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#showAPIError adds single json response message', function () {\n            var notifications = this.subject();\n            var resp = { jqXHR: { responseJSON: { message: 'Single message' } } };\n\n            run(function () {\n                notifications.showAPIError(resp);\n            });\n\n            var notification = notifications.get('alerts.firstObject');\n            (0, _chai.expect)(get(notification, 'message')).to.equal('Single message');\n            (0, _chai.expect)(get(notification, 'status')).to.equal('alert');\n            (0, _chai.expect)(get(notification, 'type')).to.equal('error');\n            (0, _chai.expect)(get(notification, 'key')).to.equal('api-error');\n        });\n\n        (0, _emberMocha.it)('#showAPIError displays default error text if response has no error/message', function () {\n            var notifications = this.subject();\n            var resp = {};\n\n            run(function () {\n                notifications.showAPIError(resp);\n            });\n            (0, _chai.expect)(notifications.get('content')).to.deep.equal([{ message: 'There was a problem on the server, please try again.', status: 'alert', type: 'error', key: 'api-error' }]);\n\n            notifications.set('content', emberA());\n\n            run(function () {\n                notifications.showAPIError(resp, { defaultErrorText: 'Overridden default' });\n            });\n            (0, _chai.expect)(notifications.get('content')).to.deep.equal([{ message: 'Overridden default', status: 'alert', type: 'error', key: 'api-error' }]);\n        });\n\n        (0, _emberMocha.it)('#showAPIError sets correct key when passed a base key', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAPIError('Test', { key: 'test.alert' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('test.alert.api-error');\n        });\n\n        (0, _emberMocha.it)('#showAPIError sets correct key when not passed a key', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAPIError('Test');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error');\n        });\n\n        (0, _emberMocha.it)('#displayDelayed moves delayed notifications into content', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showNotification('First', { delayed: true });\n                notifications.showNotification('Second', { delayed: true });\n                notifications.showNotification('Third', { delayed: false });\n                notifications.displayDelayed();\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'Third', status: 'notification', type: undefined, key: undefined }, { message: 'First', status: 'notification', type: undefined, key: undefined }, { message: 'Second', status: 'notification', type: undefined, key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#closeNotification removes POJO notifications', function () {\n            var notification = { message: 'Close test', status: 'notification' };\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.handleNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.include(notification);\n\n            run(function () {\n                notifications.closeNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.not.include(notification);\n        });\n\n        (0, _emberMocha.it)('#closeNotification removes and deletes DS.Notification records', function () {\n            var notification = _ember['default'].Object.create({ message: 'Close test', status: 'alert' });\n            var notifications = this.subject();\n\n            notification.toJSON = function () {};\n            notification.deleteRecord = function () {};\n            _sinon['default'].spy(notification, 'deleteRecord');\n            notification.save = function () {\n                return {\n                    'finally': function _finally(callback) {\n                        return callback(notification);\n                    }\n                };\n            };\n            _sinon['default'].spy(notification, 'save');\n\n            run(function () {\n                notifications.handleNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('alerts')).to.include(notification);\n\n            run(function () {\n                notifications.closeNotification(notification);\n            });\n\n            (0, _chai.expect)(notification.deleteRecord.calledOnce).to.be['true'];\n            (0, _chai.expect)(notification.save.calledOnce).to.be['true'];\n\n            (0, _chai.expect)(notifications.get('alerts')).to.not.include(notification);\n        });\n\n        (0, _emberMocha.it)('#closeNotifications only removes notifications', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAlert('First alert');\n                notifications.showNotification('First notification');\n                notifications.showNotification('Second notification', { doNotCloseNotifications: true });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(2);\n\n            run(function () {\n                notifications.closeNotifications();\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(0);\n        });\n\n        (0, _emberMocha.it)('#closeNotifications only closes notifications with specified key', function () {\n            var notifications = this.subject();\n\n            run(function () {\n                notifications.showAlert('First alert');\n                // using handleNotification as showNotification will auto-prune\n                // duplicates and keys will be removed if doNotCloseNotifications\n                // is true\n                notifications.handleNotification({ message: 'First notification', key: 'test.close', status: 'notification' });\n                notifications.handleNotification({ message: 'Second notification', key: 'test.keep', status: 'notification' });\n                notifications.handleNotification({ message: 'Third notification', key: 'test.close', status: 'notification' });\n            });\n\n            run(function () {\n                notifications.closeNotifications('test.close');\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.firstObject.message'), 'notification message').to.equal('Second notification');\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n        });\n\n        (0, _emberMocha.it)('#clearAll removes everything without deletion', function () {\n            var notifications = this.subject();\n            var notificationModel = _ember['default'].Object.create({ message: 'model' });\n\n            notificationModel.toJSON = function () {};\n            notificationModel.deleteRecord = function () {};\n            _sinon['default'].spy(notificationModel, 'deleteRecord');\n            notificationModel.save = function () {\n                return {\n                    'finally': function _finally(callback) {\n                        return callback(notificationModel);\n                    }\n                };\n            };\n            _sinon['default'].spy(notificationModel, 'save');\n\n            notifications.handleNotification(notificationModel);\n            notifications.handleNotification({ message: 'pojo' });\n\n            notifications.clearAll();\n\n            (0, _chai.expect)(notifications.get('content')).to.be.empty;\n            (0, _chai.expect)(notificationModel.deleteRecord.called).to.be['false'];\n            (0, _chai.expect)(notificationModel.save.called).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('#closeAlerts only removes alerts', function () {\n            var notifications = this.subject();\n\n            notifications.showNotification('First notification');\n            notifications.showAlert('First alert');\n            notifications.showAlert('Second alert');\n\n            run(function () {\n                notifications.closeAlerts();\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(0);\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('#closeAlerts closes only alerts with specified key', function () {\n            var notifications = this.subject();\n\n            notifications.showNotification('First notification');\n            notifications.showAlert('First alert', { key: 'test.close' });\n            notifications.showAlert('Second alert', { key: 'test.keep' });\n            notifications.showAlert('Third alert', { key: 'test.close' });\n\n            run(function () {\n                notifications.closeAlerts('test.close');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Second alert');\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/utils/ghost-paths-test', ['exports', 'ghost/utils/ghost-paths'], function (exports, _ghostUtilsGhostPaths) {\n\n    describe('Unit: Util: ghost-paths', function () {\n        describe('join', function () {\n            var join = (0, _ghostUtilsGhostPaths['default'])().url.join;\n\n            it('should join two or more paths, normalizing slashes', function () {\n                var path = undefined;\n\n                path = join('/one/', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/', '/three/');\n                expect(path).to.equal('/one/two/three/');\n\n                path = join('/one/', 'two', 'three/');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should not change the slash at the beginning', function () {\n                var path = undefined;\n\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one/', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('/one/', 'two');\n                expect(path).to.equal('/one/two/');\n                path = join('one/', 'two', 'three');\n                expect(path).to.equal('one/two/three/');\n                path = join('/one/', 'two', 'three');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should always return a slash at the end', function () {\n                var path = undefined;\n\n                path = join();\n                expect(path).to.equal('/');\n                path = join('');\n                expect(path).to.equal('/');\n                path = join('one');\n                expect(path).to.equal('one/');\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('one', 'two/');\n                expect(path).to.equal('one/two/');\n            });\n        });\n    });\n});","define('ghost/tests/unit/validators/nav-item-test', ['exports', 'chai', 'mocha', 'ghost/validators/nav-item', 'ghost/controllers/settings/navigation'], function (exports, _chai, _mocha, _ghostValidatorsNavItem, _ghostControllersSettingsNavigation) {\n\n    var testInvalidUrl = function testInvalidUrl(url) {\n        var navItem = _ghostControllersSettingsNavigation.NavItem.create({ url: url });\n\n        _ghostValidatorsNavItem['default'].check(navItem, 'url');\n\n        (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed'), '\"' + url + '\" passed').to.be['false'];\n        (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.deep.equal([{\n            attribute: 'url',\n            message: 'You must specify a valid URL or relative path'\n        }]);\n        (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    };\n\n    var testValidUrl = function testValidUrl(url) {\n        var navItem = _ghostControllersSettingsNavigation.NavItem.create({ url: url });\n\n        _ghostValidatorsNavItem['default'].check(navItem, 'url');\n\n        (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed'), '\"' + url + '\" failed').to.be['true'];\n        (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    };\n\n    (0, _mocha.describe)('Unit: Validator: nav-item', function () {\n        (0, _mocha.it)('requires label presence', function () {\n            var navItem = _ghostControllersSettingsNavigation.NavItem.create();\n\n            _ghostValidatorsNavItem['default'].check(navItem, 'label');\n\n            (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed')).to.be['false'];\n            (0, _chai.expect)(navItem.get('errors').errorsFor('label')).to.deep.equal([{\n                attribute: 'label',\n                message: 'You must specify a label'\n            }]);\n            (0, _chai.expect)(navItem.get('hasValidated')).to.include('label');\n        });\n\n        (0, _mocha.it)('doesn\\'t validate label if empty and last', function () {\n            var navItem = _ghostControllersSettingsNavigation.NavItem.create({ last: true });\n\n            _ghostValidatorsNavItem['default'].check(navItem, 'label');\n\n            (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed')).to.be['true'];\n        });\n\n        (0, _mocha.it)('requires url presence', function () {\n            var navItem = _ghostControllersSettingsNavigation.NavItem.create();\n\n            _ghostValidatorsNavItem['default'].check(navItem, 'url');\n\n            (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed')).to.be['false'];\n            (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.deep.equal([{\n                attribute: 'url',\n                message: 'You must specify a URL or relative path'\n            }]);\n            (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n        });\n\n        (0, _mocha.it)('fails on invalid url values', function () {\n            var invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n\n            invalidUrls.forEach(function (url) {\n                testInvalidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('passes on valid url values', function () {\n            var validUrls = ['http://localhost:2368', 'http://localhost:2368/some-path', 'https://localhost:2368/some-path', '//localhost:2368/some-path', 'http://localhost:2368/#test', 'http://localhost:2368/?query=test&another=example', 'http://localhost:2368/?query=test&another=example#test', 'tel:01234-567890', 'mailto:test@example.com', 'http://some:user@example.com:1234', '/relative/path'];\n\n            validUrls.forEach(function (url) {\n                testValidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('doesn\\'t validate url if empty and last', function () {\n            var navItem = _ghostControllersSettingsNavigation.NavItem.create({ last: true });\n\n            _ghostValidatorsNavItem['default'].check(navItem, 'url');\n\n            (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed')).to.be['true'];\n        });\n\n        (0, _mocha.it)('validates url and label by default', function () {\n            var navItem = _ghostControllersSettingsNavigation.NavItem.create();\n\n            _ghostValidatorsNavItem['default'].check(navItem);\n\n            (0, _chai.expect)(navItem.get('errors').errorsFor('label')).to.not.be.empty;\n            (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.not.be.empty;\n            (0, _chai.expect)(_ghostValidatorsNavItem['default'].get('passed')).to.be['false'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost/tests/unit/validators/tag-settings-test', ['exports', 'chai', 'mocha', 'sinon', 'ember', 'ghost/mixins/validation-engine'], function (exports, _chai, _mocha, _sinon, _ember, _ghostMixinsValidationEngine) {\n    var run = _ember['default'].run;\n\n    var Tag = _ember['default'].Object.extend(_ghostMixinsValidationEngine['default'], {\n        validationType: 'tag',\n\n        name: null,\n        description: null,\n        meta_title: null,\n        meta_description: null\n    });\n\n    // TODO: These tests have way too much duplication, consider creating test\n    // helpers for validations\n\n    // TODO: Move testing of validation-engine behaviour into validation-engine-test\n    // and replace these tests with specific validator tests\n\n    (0, _mocha.describe)('Unit: Validator: tag-settings', function () {\n        (0, _mocha.it)('validates all fields by default', function () {\n            var tag = Tag.create({});\n            var properties = tag.get('validators.tag.properties');\n\n            // TODO: This is checking implementation details rather than expected\n            // behaviour. Replace once we have consistent behaviour (see below)\n            (0, _chai.expect)(properties, 'properties').to.include('name');\n            (0, _chai.expect)(properties, 'properties').to.include('slug');\n            (0, _chai.expect)(properties, 'properties').to.include('description');\n            (0, _chai.expect)(properties, 'properties').to.include('metaTitle');\n            (0, _chai.expect)(properties, 'properties').to.include('metaDescription');\n\n            // TODO: .validate (and  by extension .save) doesn't currently affect\n            // .hasValidated - it would be good to make this consistent.\n            // The following tests currently fail:\n            //\n            // run(() => {\n            //     tag.validate();\n            // });\n            //\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('name');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('description');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n\n        (0, _mocha.it)('passes with valid name', function () {\n            // longest valid name\n            var tag = Tag.create({ name: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(150);\n\n            run(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates name presence', function () {\n            var tag = Tag.create();\n            var passed = false;\n            var nameErrors = undefined;\n\n            // TODO: validator is currently a singleton meaning state leaks\n            // between all objects that use it. Each object should either\n            // get it's own validator instance or validator objects should not\n            // contain state. The following currently fails:\n            //\n            // let validator = tag.get('validators.tag')\n            // expect(validator.get('passed'), 'passed').to.be.false;\n\n            run(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name').get(0);\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('You must specify a name for the tag.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates names starting with a comma', function () {\n            var tag = Tag.create({ name: ',test' });\n            var passed = false;\n            var nameErrors = undefined;\n\n            run(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name').get(0);\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names can\\'t start with commas.');\n            (0, _chai.expect)(tag.get('errors.length')).to.equal(1);\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates name length', function () {\n            // shortest invalid name\n            var tag = Tag.create({ name: new Array(152).join('x') });\n            var passed = false;\n            var nameErrors = undefined;\n\n            (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(151);\n\n            run(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name')[0];\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('passes with valid slug', function () {\n            // longest valid slug\n            var tag = Tag.create({ slug: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(150);\n\n            run(function () {\n                tag.validate({ property: 'slug' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n        });\n\n        (0, _mocha.it)('validates slug length', function () {\n            // shortest invalid slug\n            var tag = Tag.create({ slug: new Array(152).join('x') });\n            var passed = false;\n            var slugErrors = undefined;\n\n            (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(151);\n\n            run(function () {\n                tag.validate({ property: 'slug' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            slugErrors = tag.get('errors').errorsFor('slug')[0];\n            (0, _chai.expect)(slugErrors.attribute, 'errors.slug.attribute').to.equal('slug');\n            (0, _chai.expect)(slugErrors.message, 'errors.slug.message').to.equal('URL cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n        });\n\n        (0, _mocha.it)('passes with a valid description', function () {\n            // longest valid description\n            var tag = Tag.create({ description: new Array(201).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(200);\n\n            run(function () {\n                tag.validate({ property: 'description' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n        });\n\n        (0, _mocha.it)('validates description length', function () {\n            // shortest invalid description\n            var tag = Tag.create({ description: new Array(202).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(201);\n\n            run(function () {\n                tag.validate({ property: 'description' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('description')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.description.attribute').to.equal('description');\n            (0, _chai.expect)(errors.message, 'errors.description.message').to.equal('Description cannot be longer than 200 characters.');\n\n            // TODO: tag.errors appears to be a singleton and previous errors are\n            // not cleared despite creating a new tag object\n            //\n            // console.log(JSON.stringify(tag.get('errors')));\n            // expect(tag.get('errors.length')).to.equal(1);\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n        });\n\n        // TODO: we have both meta_title and metaTitle property names on the\n        // model/validator respectively - this should be standardised\n        (0, _mocha.it)('passes with a valid meta_title', function () {\n            // longest valid meta_title\n            var tag = Tag.create({ meta_title: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('meta_title').length, 'meta_title length').to.equal(150);\n\n            run(function () {\n                tag.validate({ property: 'metaTitle' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n        });\n\n        (0, _mocha.it)('validates meta_title length', function () {\n            // shortest invalid meta_title\n            var tag = Tag.create({ meta_title: new Array(152).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('meta_title').length, 'meta_title length').to.equal(151);\n\n            run(function () {\n                tag.validate({ property: 'metaTitle' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('meta_title')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.meta_title.attribute').to.equal('meta_title');\n            (0, _chai.expect)(errors.message, 'errors.meta_title.message').to.equal('Meta Title cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n        });\n\n        // TODO: we have both meta_description and metaDescription property names on\n        // the model/validator respectively - this should be standardised\n        (0, _mocha.it)('passes with a valid meta_description', function () {\n            // longest valid description\n            var tag = Tag.create({ meta_description: new Array(201).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('meta_description').length, 'meta_description length').to.equal(200);\n\n            run(function () {\n                tag.validate({ property: 'metaDescription' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n\n        (0, _mocha.it)('validates meta_description length', function () {\n            // shortest invalid meta_description\n            var tag = Tag.create({ meta_description: new Array(202).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('meta_description').length, 'meta_description length').to.equal(201);\n\n            run(function () {\n                tag.validate({ property: 'metaDescription' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('meta_description')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.meta_description.attribute').to.equal('meta_description');\n            (0, _chai.expect)(errors.message, 'errors.meta_description.message').to.equal('Meta Description cannot be longer than 200 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n    });\n});\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n/* jshint expr:true */\n\n// import validator from 'ghost/validators/tag-settings';","/* jshint ignore:start */\n\nrequire('ghost/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsnpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrrxlinHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvx0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnprYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfile":"tests.js"}