#!/usr/bin/env node

process.bin = process.title = 'Ghost CLI';

var program = require('commander'),
    inquirer = require('inquirer'),
    spawn = require('child_process').spawn,
    fs = require('fs'),
    path = require('path'),
    ProgressBar = require('progress'),
    grunt = require('grunt'),
    file = grunt.file,
    ghostRootPath = path.join(__dirname, '..');

// Made this a separate function in case other commands need it.
function copySourceFiles(dirPath) {
    // Use grunt.file to glob all the files up for us
    var ghostFiles = file.expandMapping(['**', '!node_modules/**', '!**/node_modules'], dirPath, {
            cwd: ghostRootPath
        }),
        // Have a progress bar to give some feedback while we copy
        bar = new ProgressBar('    - Copying files           [:bar]', {
            complete: '=',
            incomplete: ' ',
            width: 45,
            total: ghostFiles.length + 1
        });

    // Copy all the files over
    ghostFiles.forEach(function (fileMapping) {
        var sourcePath = fileMapping.src[0];

        // Skip directories and non-existing files
        if (file.isDir(sourcePath) || !file.exists(sourcePath)) {
            return bar.tick();
        }

        file.copy(sourcePath, fileMapping.dest);
        bar.tick();
    });

    // Finish up by copying the config.js over
    file.copy(path.join(dirPath, 'config.example.js'), path.join(dirPath, 'config.js'));
    bar.tick();
}

function logProcessOutput(procToLog) {
    procToLog.stdout.on('data', function (data) {
        var buff = new Buffer(data);
        console.log(buff.toString('utf8'));
    });

    procToLog.stderr.on('data', function (data) {
        data += '';
        console.log(data.replace('\n', '\nstderr: '));
    });
}

function npmInstall(dirPath, done) {
    var bar = new ProgressBar('    - Installing Modules      [:bar]', {
            complete: '=',
            incomplete: ' ',
            width: 45,
            // This number is kind of arbitrary and will need to change if grunt init starts outputting more
            total: 1000
        }),
        installProcess = grunt.util.spawn({
            cmd: 'npm',
            args: ['install'],
            opts: {
                cwd: dirPath
            }
        }, done),
        updateBar = function () {
            if (bar.curr < bar.total - 10) {
                bar.tick();
            }
        };

    installProcess.stdout.on('data', function (data) {
        updateBar();
    });

    // Npm is weird and outputs on stderr
    installProcess.stderr.on('data', function () {
        updateBar();
    });

    installProcess.on('exit', function () {
        bar.tick(bar.total - bar.curr);
    });
}

function initializeGitRepo(dirPath, done) {
    var bar = new ProgressBar('    - Initializing Repo       [:bar]', {
            complete: '=',
            incomplete: ' ',
            width: 45,
            // This number is kind of arbitrary and will need to change if grunt init starts outputting more
            total: 4
        }),
        gitIgnoreContent = [
            'b-cov',
            '*.seed',
            '*.log',
            '*.csv',
            '*.dat',
            '*.out',
            '*.pid',
            '*.gz',

            'pids',
            'logs',
            'results',

            'npm-debug.log',
            'node_modules',

            '.idea/*',
            '*.iml',
            'projectFilesBackup',

            '.DS_Store',

            '# Ghost DB file',
            '*.db',
            '*.db-journal',

            '.build',
            '.dist',

            '/core/client/tpl/hbs-tpl.js',
            '/core/client/assets/css',
            '.sass-cache/',
            '/core/client/assets/sass/config.rb',
            '/core/client/assets/sass/layouts/config.rb',
            '/core/client/assets/sass/modules/config.rb',
            '/core/client/assets/sass/modules/bourbon',
            '/core/client/assets/sass/modules/bourbon/*',
            '/core/server/data/export/exported*',
            '/docs',
            '/_site',
            '/content/data/*',
            '/content/plugins/**/*',
            '/content/themes/**/*',
            '/content/images/**/*',
            '!/content/themes/casper/**',
            '!README.md',

            '# Changelog, which is autogenerated, not committed',
            'CHANGELOG.md',

            '# Casper generated files',
            '/core/test/functional/*.png',

            'config.js',

            '# Built asset files',
            '/core/built'
        ].join('\n');

    bar.tick();
    grunt.file.write(path.join(dirPath, '.gitignore'), gitIgnoreContent);
    bar.tick();

    // Initialize the repo
    grunt.util.spawn({
        cmd: 'git',
        args: ['init'],
        opts: {
            cwd: dirPath
        }
    }, function (err, result, code) {
        if (err || code !== 0) {
            bar.terminate();
            return done(err, result, code);
        }

        bar.tick();

        // Pull in the casper theme
        grunt.util.spawn({
            cmd: 'git',
            args: ['submodule', 'add', '-f', 'git@github.com:TryGhost/Casper.git', 'content/themes/casper'],
            opts: {
                cwd: dirPath
            }
        }, function (err, result, code) {
            bar.tick();
            done(err, result, code);
        });
    });
}

function gruntInit(dirPath, done) {
    var bar = new ProgressBar('    - Building Assets         [:bar]', {
            complete: '=',
            incomplete: ' ',
            width: 45,
            // This number is kind of arbitrary and will need to change if grunt init starts outputting more
            total: 22
        }),
        initProcess = grunt.util.spawn({
            cmd: 'grunt',
            args: ['init'],
            opts: {
                cwd: dirPath
            }
        }, done);

    initProcess.stdout.on('data', function (data) {
        bar.tick();
    });

    initProcess.on('exit', function () {
        bar.tick(bar.total - bar.curr);
    });
}

// NOTE: Not actually used until I can figure out the configuration stuff for mysql
function setupDatabase(dirPath, done) {
    // Choose the database
    inquirer.prompt([{
        type: 'list',
        name: 'database',
        message: 'What type of database would you like to setup?',
        choices: ['SQLite', 'MySQL'],
        default: 'SQLite'
    }], function (answers) {
        if (answers.database === 'MySQL') {
            // The mysql module should already be installed
            // TODO: Update the configuration values
            done();
        }

        // Sqlite is setup by default in the configruation
        done();
    });
}


program
    .command('init [dirPath]')
    .description('setup a new Ghost installation')
    .action(function (dirPath) {
        dirPath = path.join(process.cwd(), dirPath || '');

        var relPath = path.relative(process.cwd(), dirPath || ''),
            where = relPath || 'the current directory';

        // Confirm the installation directory
        inquirer.prompt([{
            type: 'confirm',
            name: 'createConfirm',
            message: 'Setup a new Ghost installation in ' + where + '?',
            default: true
        }], function (answers) {
            // Bug out if they didn't confirm the directory
            if (!answers.createConfirm) {
                return;
            }

            // Copy over the source files from the global module
            copySourceFiles(dirPath);

            // TODO: Database setup
            // setupDatabase(dirPath, function () { });

            npmInstall(dirPath, function (err, result, code) {
                var message;
                if (err || code !== 0) {
                    // Ignoring stderr for npm because they output warnings on it.
                    message = (err && err.message) || 'Exited with code ' + code;
                    console.log('Uh oh! Looks like there was a problem running "npm install".');
                    console.log('');
                    console.log('- ' + message);
                    return;
                }

                initializeGitRepo(dirPath, function (err, result, code) {
                    var message;
                    if (err || code !== 0) {
                        message = (err && err.message) ||  result.stderr || 'Exited with code ' + code;

                        console.log('Uh oh! Looks like there was a problem setting up the git repo.  Make sure you have git installed.');
                        console.log('');
                        console.log('- ' + message);
                        return;
                    }

                    // Run grunt init
                    gruntInit(dirPath, function (err, result, code) {
                        var message,
                            cdPart = relPath ? 'cd \'' + relPath + '\' && ' : '';

                        console.log('');

                        if (err || code !== 0 || result.stderr) {
                            message = (err && err.message) ||  result.stderr || 'Exited with code ' + code;

                            console.log('Uh oh! Looks like there was a problem running "grunt init".  Make sure you have Grunt, Ruby and the bourbon gem installed');
                            console.log('');
                            console.log('- ' + message);
                            return;
                        }

                        console.log('All Done!'.green + ' Run "' + cdPart + 'ghost start" to start blogging');
                    });
                });
            });
        });
    });


program
    .command('start')
    .description('start Ghost')
    .action(function () {
        var pathToLocalGhost = path.join(process.cwd(), 'index.js'),
            ghost = spawn('node', [pathToLocalGhost]);

        logProcessOutput(ghost);

        ghost.on('exit', function (code) {
            console.log('Ghost exited with code ' + code);
            process.exit(code);
        });
    });

program.parse(process.argv);